{
  "address": "0x2C946f80Ef5eeD35DccbEB2C3b848b8e0b521dCe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "larTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum Dao.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum Dao.ProposalStatus",
          "name": "proposalStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Dao.Option[]",
          "name": "options",
          "type": "tuple[]"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "Testing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "voterAddress",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "optionIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "optionVotes",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Dao.Voter",
          "name": "voter",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Dao.Option[]",
          "name": "options",
          "type": "tuple[]"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "optionVotes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "optionIndexes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Dao.Option[]",
          "name": "proposalOptions",
          "type": "tuple[]"
        }
      ],
      "name": "VoteCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_proposalType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_proposalStatus",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "internalType": "struct Dao.Option[]",
          "name": "_options",
          "type": "tuple[]"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getOptions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "internalType": "struct Dao.Option[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getVoters",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "voterAddress",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "optionIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "optionVotes",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Dao.Voter[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "enum Dao.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        },
        {
          "internalType": "enum Dao.ProposalStatus",
          "name": "proposalStatus",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "sqrt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "z",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votingPower",
          "type": "uint256[]"
        }
      ],
      "name": "voteProposalByQuadratic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "voteProposalBySingleChoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votingPower",
          "type": "uint256[]"
        }
      ],
      "name": "voteProposalByWeighing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ec6f630f63d37d62c64a864dc0726f8aa001a8753018dac543bc73391e08b17",
  "receipt": {
    "to": null,
    "from": "0xDD4c43c13e6F1b2374Ed9AAabBA7D56Bb4a68A03",
    "contractAddress": "0x2C946f80Ef5eeD35DccbEB2C3b848b8e0b521dCe",
    "transactionIndex": 35,
    "gasUsed": "4089128",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000002000000000000000000000000000000000000000000000000000a00000000000000000040100000000000000000000040000000200000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000040000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xbebf3998422b3a7af280b1d072ffcb8dd66e0620156de372b07816450c0929c7",
    "transactionHash": "0x2ec6f630f63d37d62c64a864dc0726f8aa001a8753018dac543bc73391e08b17",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 28236614,
        "transactionHash": "0x2ec6f630f63d37d62c64a864dc0726f8aa001a8753018dac543bc73391e08b17",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000dd4c43c13e6f1b2374ed9aaabba7d56bb4a68a03",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001a2645d320d1a800000000000000000000000000000000000000000000000003b9dda96505b279000000000000000000000000000000000000000000000940930210d13226d60f000000000000000000000000000000000000000000000000039fb76391e4e0d1000000000000000000000000000000000000000000000940931c37170547a7b7",
        "logIndex": 170,
        "blockHash": "0xbebf3998422b3a7af280b1d072ffcb8dd66e0620156de372b07816450c0929c7"
      }
    ],
    "blockNumber": 28236614,
    "cumulativeGasUsed": "14237200",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7AB3bE7df12321Ab0f54FbbB5CECCC4a66ae2030"
  ],
  "numDeployments": 5,
  "solcInputHash": "f7a5ac4c13389b636eedd2aeb9ba3c1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"larTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum Dao.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum Dao.ProposalStatus\",\"name\":\"proposalStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Dao.Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Testing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Dao.Voter\",\"name\":\"voter\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Dao.Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Dao.Option[]\",\"name\":\"proposalOptions\",\"type\":\"tuple[]\"}],\"name\":\"VoteCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_proposalType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposalStatus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"struct Dao.Option[]\",\"name\":\"_options\",\"type\":\"tuple[]\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"struct Dao.Option[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getVoters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Dao.Voter[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum Dao.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"enum Dao.ProposalStatus\",\"name\":\"proposalStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votingPower\",\"type\":\"uint256[]\"}],\"name\":\"voteProposalByQuadratic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"voteProposalBySingleChoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votingPower\",\"type\":\"uint256[]\"}],\"name\":\"voteProposalByWeighing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dao.sol\":\"Dao\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Dao.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/*\\r\\ncreateQuadraticProposal()\\r\\ncreateWeightedProposal()\\r\\ncreateSingleChoiceProposal()\\r\\nvoteByQuadratic()\\r\\nvoteBySingleChoice()\\r\\nvoteByWeighted()\\r\\n\\r\\n */\\r\\ncontract Dao is ReentrancyGuard {\\r\\n    IERC20 larToken;\\r\\n    uint256 proposalId;\\r\\n\\r\\n    enum ProposalType {\\r\\n        SingleChoice,\\r\\n        Weighted,\\r\\n        Quadratic\\r\\n    }\\r\\n\\r\\n    enum ProposalStatus {\\r\\n        Pending,\\r\\n        Active,\\r\\n        Closed\\r\\n    }\\r\\n\\r\\n    struct Option {\\r\\n        uint256 index;\\r\\n        string optionText;\\r\\n        uint256 vote;\\r\\n    }\\r\\n\\r\\n    struct Voter {\\r\\n        address voterAddress;\\r\\n        uint[] optionIndexes;\\r\\n        uint[] optionVotes;\\r\\n    }\\r\\n\\r\\n\\r\\n    struct Proposal {\\r\\n        uint256 id;\\r\\n        address creator;\\r\\n        string title;\\r\\n        string description;\\r\\n        ProposalType proposalType;\\r\\n        ProposalStatus proposalStatus;\\r\\n        uint256 startDate;\\r\\n        uint256 duration;\\r\\n        Option[] options;\\r\\n        Voter[] voters;\\r\\n    }\\r\\n\\r\\n    event ProposalCreated(\\r\\n        uint256 id,\\r\\n        address creator,\\r\\n        string title,\\r\\n        string description,\\r\\n        ProposalType proposalType,\\r\\n        ProposalStatus proposalStatus,\\r\\n        uint256 startDate,\\r\\n        uint256 duration,\\r\\n        Option[] options\\r\\n    );\\r\\n\\r\\n\\r\\n    event VoteCreated(uint id, uint[] optionVotes, uint[] optionIndexes, address voterAddress, Option[] proposalOptions);\\r\\n\\r\\n    event Vote(uint256 id, Voter voter, Option[] options);\\r\\n    event Testing(uint256 id, address voter);\\r\\n\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n\\r\\n    constructor(address larTokenAddress) {\\r\\n        larToken = IERC20(larTokenAddress);\\r\\n    }\\r\\n\\r\\n    function createProposal(\\r\\n        string memory _title,\\r\\n        string memory _description,\\r\\n        uint256 _proposalType,\\r\\n        uint256 _proposalStatus,\\r\\n        uint256 _startDate,\\r\\n        uint256 _duration,\\r\\n        Option[] memory _options\\r\\n    ) external nonReentrant {\\r\\n        require(\\r\\n            larToken.balanceOf(msg.sender) >= 5e18,\\r\\n            \\\"Minimum of 5 LAR is needed to create a proposal\\\"\\r\\n        );\\r\\n\\r\\n        larToken.transferFrom(msg.sender, address(this), 5e18);\\r\\n\\r\\n        ProposalType proposalType;\\r\\n        if (_proposalType == 0) {\\r\\n            proposalType = ProposalType.SingleChoice;\\r\\n        } else if (_proposalType == 1) {\\r\\n            proposalType = ProposalType.Weighted;\\r\\n        } else if (_proposalType == 2) {\\r\\n            proposalType = ProposalType.Quadratic;\\r\\n        }\\r\\n\\r\\n        ProposalStatus proposalStatus;\\r\\n        if (_proposalStatus == 0) {\\r\\n            proposalStatus = ProposalStatus.Pending;\\r\\n        } else if (_proposalStatus == 1) {\\r\\n            proposalStatus = ProposalStatus.Active;\\r\\n        } else if (_proposalStatus == 2) {\\r\\n            proposalStatus = ProposalStatus.Closed;\\r\\n        }\\r\\n\\r\\n        proposalId++;\\r\\n\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        proposal.id = proposalId;\\r\\n        proposal.creator = msg.sender;\\r\\n        proposal.title = _title;\\r\\n        proposal.description = _description;\\r\\n        proposal.proposalType = proposalType;\\r\\n        proposal.proposalStatus = proposalStatus;\\r\\n        proposal.startDate = _startDate;\\r\\n        proposal.duration = _duration;\\r\\n\\r\\n\\r\\n        for (uint256 i = 0; i < _options.length; i++) {\\r\\n            Option memory currentOption = _options[i];\\r\\n            // console.log(\\\"This is the current option: \\\", currentOption.optionText);\\r\\n            proposal.options.push(currentOption);\\r\\n        }\\r\\n\\r\\n        emit ProposalCreated(\\r\\n            proposalId,\\r\\n            msg.sender,\\r\\n            _title,\\r\\n            _description,\\r\\n            proposalType,\\r\\n            proposalStatus,\\r\\n            _startDate,\\r\\n            _duration,\\r\\n            _options\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getOptions(uint256 id) external view returns (Option[] memory) {\\r\\n        return proposals[id].options;\\r\\n    }\\r\\n\\r\\n    function getVoters(uint256 id) external view returns (Voter[] memory) {\\r\\n        return proposals[id].voters;\\r\\n    }\\r\\n\\r\\n    function voteProposalByQuadratic(\\r\\n        uint256 id,\\r\\n        uint256[] memory indexes,\\r\\n        uint256[] memory votingPower\\r\\n    ) external nonReentrant {\\r\\n        uint256 totalVotingPower = getTotalVotingPower(votingPower);\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = proposals[id];\\r\\n\\r\\n        require(proposal.proposalType == ProposalType.Quadratic, \\\"quadratic voting not allowed for the proposal\\\");\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal has closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"You've voted already\\\");\\r\\n        require(\\r\\n            larToken.balanceOf(msg.sender) >= totalVotingPower,\\r\\n            \\\"Insufficient Voting Power\\\"\\r\\n        );\\r\\n        larToken.transferFrom(msg.sender, address(this), totalVotingPower);\\r\\n\\r\\n        Option[] storage options = proposals[id].options;\\r\\n\\r\\n        for (uint256 i = 0; i < indexes.length; i++) {\\r\\n            uint256 currentOptionIndex = indexes[i];\\r\\n            uint256 currentOptionVotingPower = votingPower[i];\\r\\n            console.log(sqrt(currentOptionVotingPower) * (10**9));\\r\\n            options[currentOptionIndex].vote += sqrt(currentOptionVotingPower) * (10**9);\\r\\n        }\\r\\n\\r\\n        uint[] memory optionVotes = new uint[](votingPower.length);\\r\\n        for (uint i = 0; i < votingPower.length; i++){\\r\\n            optionVotes[i] = sqrt(votingPower[i]) * (10**9);\\r\\n        }\\r\\n\\r\\n        Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: indexes,\\r\\n            optionVotes: optionVotes\\r\\n        });\\r\\n\\r\\n        proposals[id].voters.push(voter);\\r\\n\\r\\n        emit Vote(id, voter, options);\\r\\n        emit VoteCreated(id, optionVotes, indexes, msg.sender, proposals[id].options);\\r\\n\\r\\n    }\\r\\n\\r\\n    function voteProposalBySingleChoice(\\r\\n        uint256 id,\\r\\n        uint256 index,\\r\\n        uint256 votingPower\\r\\n    ) external nonReentrant {\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = proposals[id];\\r\\n\\r\\n        require(proposal.proposalType == ProposalType.SingleChoice, \\\"single choice voting not allowed for the proposal\\\");\\r\\n\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal has closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"You've voted already\\\");\\r\\n        require(\\r\\n            larToken.balanceOf(msg.sender) >= votingPower,\\r\\n            \\\"Insufficient voting Power\\\"\\r\\n        );\\r\\n\\r\\n        larToken.transferFrom(msg.sender, address(this), votingPower);\\r\\n\\r\\n        proposals[id].options[index].vote += votingPower;\\r\\n        \\r\\n        uint[] memory optionIndex = new uint[](1);\\r\\n        optionIndex[0] = index;\\r\\n\\r\\n        uint[] memory optionVotes = new uint[](1);\\r\\n        optionVotes[0] = votingPower;\\r\\n\\r\\n         Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: optionIndex,\\r\\n            optionVotes: optionVotes\\r\\n        });\\r\\n\\r\\n        proposals[id].voters.push(voter);\\r\\n\\r\\n        emit Vote(id, voter, proposals[id].options);\\r\\n        emit Testing(id, msg.sender);\\r\\n        emit VoteCreated(id, optionVotes, optionIndex, msg.sender, proposals[id].options);\\r\\n        // proposals[id].voters.push(msg.sender);\\r\\n    }\\r\\n\\r\\n    function voteProposalByWeighing(\\r\\n        uint256 id,\\r\\n        uint256[] memory indexes,\\r\\n        uint256[] memory votingPower\\r\\n    ) external nonReentrant {\\r\\n        uint256 totalVotingPower = getTotalVotingPower(votingPower);\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = proposals[id];\\r\\n\\r\\n        require(proposal.proposalType == ProposalType.Weighted, \\\"weighted voting not allowed for the proposal\\\");\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal has closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"You've voted already\\\");\\r\\n        require(\\r\\n            larToken.balanceOf(msg.sender) >= totalVotingPower,\\r\\n            \\\"Insufficient Voting Power\\\"\\r\\n        );\\r\\n        larToken.transferFrom(msg.sender, address(this), totalVotingPower);\\r\\n\\r\\n        Option[] storage options = proposals[id].options;\\r\\n\\r\\n        for (uint256 i = 0; i < indexes.length; i++) {\\r\\n            uint256 currentOptionIndex = indexes[i];\\r\\n            uint256 currentOptionVotingPower = votingPower[i];\\r\\n            options[currentOptionIndex].vote += currentOptionVotingPower;\\r\\n        }\\r\\n\\r\\n        // Voter[] voters = proposal.voters\\r\\n        Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: indexes,\\r\\n            optionVotes: votingPower\\r\\n        });\\r\\n\\r\\n        proposals[id].voters.push(voter);\\r\\n        \\r\\n\\r\\n        emit Vote(id, voter, options);\\r\\n        emit VoteCreated(id, votingPower, indexes, msg.sender, proposals[id].options); \\r\\n\\r\\n    }\\r\\n\\r\\n    function getTotalVotingPower(uint256[] memory votingPower)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 totalVotingPower)\\r\\n    {\\r\\n        for (uint256 i = 0; i < votingPower.length; i++) {\\r\\n            totalVotingPower += votingPower[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkVotingStatus(uint256 id, address voter)\\r\\n        internal\\r\\n        view\\r\\n        returns (int256)\\r\\n    {\\r\\n        Voter[] memory voters = proposals[id].voters;\\r\\n        for (uint256 i = 0; i < voters.length; i++) {\\r\\n            address currentVoter = voters[i].voterAddress;\\r\\n            if (voter == currentVoter) {\\r\\n                return int256(i);\\r\\n            }\\r\\n        }\\r\\n        return -1;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 y) public pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x80ecaeb00ea85e740b0c90cc00bd0fa79136f08956ff735694e6b57a2a7eb4d9\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004983380380620049838339818101604052810190620000379190620000f1565b600160008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000123565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b9826200008c565b9050919050565b620000cb81620000ac565b8114620000d757600080fd5b50565b600081519050620000eb81620000c0565b92915050565b6000602082840312156200010a576200010962000087565b5b60006200011a84828501620000da565b91505092915050565b61485080620001336000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806386b646f21161005b57806386b646f21461012c5780638915b3fb1461015c5780639a2341751461018c578063e1665994146101a857610088565b8063013cf08b1461008d5780632d2a1544146100c457806350d2d30a146100e0578063677342ce146100fc575b600080fd5b6100a760048036038101906100a29190612dc7565b6101c4565b6040516100bb989796959493929190612f93565b60405180910390f35b6100de60048036038101906100d99190613167565b610356565b005b6100fa60048036038101906100f59190613167565b610e21565b005b61011660048036038101906101119190612dc7565b6117f6565b60405161012391906131f2565b60405180910390f35b61014660048036038101906101419190612dc7565b611870565b60405161015391906133f3565b60405180910390f35b61017660048036038101906101719190612dc7565b6119eb565b6040516101839190613571565b60405180910390f35b6101a660048036038101906101a19190613593565b611b06565b005b6101c260048036038101906101bd9190613806565b612595565b005b60036020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020180546102139061392b565b80601f016020809104026020016040519081016040528092919081815260200182805461023f9061392b565b801561028c5780601f106102615761010080835404028352916020019161028c565b820191906000526020600020905b81548152906001019060200180831161026f57829003601f168201915b5050505050908060030180546102a19061392b565b80601f01602080910402602001604051908101604052809291908181526020018280546102cd9061392b565b801561031a5780601f106102ef5761010080835404028352916020019161031a565b820191906000526020600020905b8154815290600101906020018083116102fd57829003601f168201915b5050505050908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16908060050154908060060154905088565b60026000540361039b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610392906139a8565b60405180910390fd5b600260008190555060006103ae826129db565b905060006103bc8533612a2d565b905060006003600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461044f9061392b565b80601f016020809104026020016040519081016040528092919081815260200182805461047b9061392b565b80156104c85780601f1061049d576101008083540402835291602001916104c8565b820191906000526020600020905b8154815290600101906020018083116104ab57829003601f168201915b505050505081526020016003820180546104e19061392b565b80601f016020809104026020016040519081016040528092919081815260200182805461050d9061392b565b801561055a5780601f1061052f5761010080835404028352916020019161055a565b820191906000526020600020905b81548152906001019060200180831161053d57829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561058857610587612ed4565b5b600281111561059a57610599612ed4565b5b81526020016004820160019054906101000a900460ff1660028111156105c3576105c2612ed4565b5b60028111156105d5576105d4612ed4565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156106ea57838290600052602060002090600302016040518060600160405290816000820154815260200160018201805461064f9061392b565b80601f016020809104026020016040519081016040528092919081815260200182805461067b9061392b565b80156106c85780601f1061069d576101008083540402835291602001916106c8565b820191906000526020600020905b8154815290600101906020018083116106ab57829003601f168201915b5050505050815260200160028201548152505081526020019060010190610612565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561084f57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156107df57602002820191906000526020600020905b8154815260200190600101908083116107cb575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561083757602002820191906000526020600020905b815481526020019060010190808311610823575b50505050508152505081526020019060010190610717565b5050505081525050905060028081111561086c5761086b612ed4565b5b8160800151600281111561088357610882612ed4565b5b146108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba90613a3a565b60405180910390fd5b8060e001518160c001516108d79190613a89565b4210610918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090f90613b09565b60405180910390fd5b6000821261095b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095290613b75565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016109b79190613b95565b602060405180830381865afa1580156109d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f89190613bc5565b1015610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3090613c3e565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610a9893929190613c5e565b6020604051808303816000875af1158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb9190613ccd565b50600060036000888152602001908152602001600020600701905060005b8651811015610bc7576000878281518110610b1757610b16613cfa565b5b602002602001015190506000878381518110610b3657610b35613cfa565b5b60200260200101519050610b60633b9aca00610b51836117f6565b610b5b9190613d29565b612c51565b633b9aca00610b6e826117f6565b610b789190613d29565b848381548110610b8b57610b8a613cfa565b5b90600052602060002090600302016002016000828254610bab9190613a89565b9250508190555050508080610bbf90613d6b565b915050610af9565b506000855167ffffffffffffffff811115610be557610be4613024565b5b604051908082528060200260200182016040528015610c135781602001602082028036833780820191505090505b50905060005b8651811015610c8657633b9aca00610c4a888381518110610c3d57610c3c613cfa565b5b60200260200101516117f6565b610c549190613d29565b828281518110610c6757610c66613cfa565b5b6020026020010181815250508080610c7e90613d6b565b915050610c19565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001898152602001838152509050600360008a815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610d5f929190612d13565b506040820151816002019080519060200190610d7c929190612d13565b5050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e92898285604051610db293929190613ff0565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489838a33600360008f8152602001908152602001600020600701604051610e06959493929190614145565b60405180910390a15050505050506001600081905550505050565b600260005403610e66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5d906139a8565b60405180910390fd5b60026000819055506000610e79826129db565b90506000610e878533612a2d565b905060006003600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610f1a9061392b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f469061392b565b8015610f935780601f10610f6857610100808354040283529160200191610f93565b820191906000526020600020905b815481529060010190602001808311610f7657829003601f168201915b50505050508152602001600382018054610fac9061392b565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd89061392b565b80156110255780601f10610ffa57610100808354040283529160200191611025565b820191906000526020600020905b81548152906001019060200180831161100857829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561105357611052612ed4565b5b600281111561106557611064612ed4565b5b81526020016004820160019054906101000a900460ff16600281111561108e5761108d612ed4565b5b60028111156110a05761109f612ed4565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156111b557838290600052602060002090600302016040518060600160405290816000820154815260200160018201805461111a9061392b565b80601f01602080910402602001604051908101604052809291908181526020018280546111469061392b565b80156111935780601f1061116857610100808354040283529160200191611193565b820191906000526020600020905b81548152906001019060200180831161117657829003601f168201915b50505050508152602001600282015481525050815260200190600101906110dd565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561131a57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156112aa57602002820191906000526020600020905b815481526020019060010190808311611296575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561130257602002820191906000526020600020905b8154815260200190600101908083116112ee575b505050505081525050815260200190600101906111e2565b505050508152505090506001600281111561133857611337612ed4565b5b8160800151600281111561134f5761134e612ed4565b5b1461138f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113869061421f565b60405180910390fd5b8060e001518160c001516113a39190613a89565b42106113e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113db90613b09565b60405180910390fd5b60008212611427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141e90613b75565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016114839190613b95565b602060405180830381865afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c49190613bc5565b1015611505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fc90613c3e565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161156493929190613c5e565b6020604051808303816000875af1158015611583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a79190613ccd565b50600060036000888152602001908152602001600020600701905060005b865181101561165c5760008782815181106115e3576115e2613cfa565b5b60200260200101519050600087838151811061160257611601613cfa565b5b60200260200101519050808483815481106116205761161f613cfa565b5b906000526020600020906003020160020160008282546116409190613a89565b925050819055505050808061165490613d6b565b9150506115c5565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781525090506003600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190611735929190612d13565b506040820151816002019080519060200190611752929190612d13565b5050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e9288828460405161178893929190613ff0565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266488878933600360008e81526020019081526020016000206007016040516117dc959493929190614145565b60405180910390a150505050506001600081905550505050565b6000600382111561185d5781905060006001600284611815919061426e565b61181f9190613a89565b90505b8181101561185757809150600281828561183c919061426e565b6118469190613a89565b611850919061426e565b9050611822565b5061186b565b6000821461186a57600190505b5b919050565b606060036000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156119e057838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561197057602002820191906000526020600020905b81548152602001906001019080831161195c575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156119c857602002820191906000526020600020905b8154815260200190600101908083116119b4575b505050505081525050815260200190600101906118a8565b505050509050919050565b606060036000838152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b82821015611afb578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054611a609061392b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8c9061392b565b8015611ad95780601f10611aae57610100808354040283529160200191611ad9565b820191906000526020600020905b815481529060010190602001808311611abc57829003601f168201915b5050505050815260200160028201548152505081526020019060010190611a23565b505050509050919050565b600260005403611b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b42906139a8565b60405180910390fd5b60026000819055506000611b5f8433612a2d565b905060006003600086815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054611bf29061392b565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1e9061392b565b8015611c6b5780601f10611c4057610100808354040283529160200191611c6b565b820191906000526020600020905b815481529060010190602001808311611c4e57829003601f168201915b50505050508152602001600382018054611c849061392b565b80601f0160208091040260200160405190810160405280929190818152602001828054611cb09061392b565b8015611cfd5780601f10611cd257610100808354040283529160200191611cfd565b820191906000526020600020905b815481529060010190602001808311611ce057829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115611d2b57611d2a612ed4565b5b6002811115611d3d57611d3c612ed4565b5b81526020016004820160019054906101000a900460ff166002811115611d6657611d65612ed4565b5b6002811115611d7857611d77612ed4565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015611e8d578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054611df29061392b565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1e9061392b565b8015611e6b5780601f10611e4057610100808354040283529160200191611e6b565b820191906000526020600020905b815481529060010190602001808311611e4e57829003601f168201915b5050505050815260200160028201548152505081526020019060010190611db5565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015611ff257838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015611f8257602002820191906000526020600020905b815481526020019060010190808311611f6e575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611fda57602002820191906000526020600020905b815481526020019060010190808311611fc6575b50505050508152505081526020019060010190611eba565b50505050815250509050600060028111156120105761200f612ed4565b5b8160800151600281111561202757612026612ed4565b5b14612067576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205e90614311565b60405180910390fd5b8060e001518160c0015161207b9190613a89565b42106120bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b390613b09565b60405180910390fd5b600082126120ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f690613b75565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161215b9190613b95565b602060405180830381865afa158015612178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219c9190613bc5565b10156121dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d49061437d565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161223c93929190613c5e565b6020604051808303816000875af115801561225b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227f9190613ccd565b50826003600087815260200190815260200160002060070185815481106122a9576122a8613cfa565b5b906000526020600020906003020160020160008282546122c99190613a89565b925050819055506000600167ffffffffffffffff8111156122ed576122ec613024565b5b60405190808252806020026020018201604052801561231b5781602001602082028036833780820191505090505b509050848160008151811061233357612332613cfa565b5b6020026020010181815250506000600167ffffffffffffffff81111561235c5761235b613024565b5b60405190808252806020026020018201604052801561238a5781602001602082028036833780820191505090505b50905084816000815181106123a2576123a1613cfa565b5b602002602001018181525050600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381525090506003600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190612486929190612d13565b5060408201518160020190805190602001906124a3929190612d13565b5050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928882600360008c81526020019081526020016000206007016040516124ee9392919061439d565b60405180910390a17f15ee2336b150a2ac9a8dc3209e14074c62564ed20d671cf7463ce9dd78a5e9c588336040516125279291906143e2565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266488838533600360008e815260200190815260200160002060070160405161257b959493929190614145565b60405180910390a150505050506001600081905550505050565b6002600054036125da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d1906139a8565b60405180910390fd5b6002600081905550674563918244f40000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016126469190613b95565b602060405180830381865afa158015612663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126879190613bc5565b10156126c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126bf9061447d565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330674563918244f400006040518463ffffffff1660e01b815260040161272f939291906144e2565b6020604051808303816000875af115801561274e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127729190613ccd565b50600080860361278557600090506127a5565b6001860361279657600190506127a4565b600286036127a357600290505b5b5b60008086036127b757600090506127d7565b600186036127c857600190506127d6565b600286036127d557600290505b5b5b600260008154809291906127ea90613d6b565b9190505550600060036000600254815260200190815260200160002090506002548160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508981600201908161286791906146a6565b508881600301908161287991906146a6565b50828160040160006101000a81548160ff021916908360028111156128a1576128a0612ed4565b5b0217905550818160040160016101000a81548160ff021916908360028111156128cd576128cc612ed4565b5b021790555085816005018190555084816006018190555060005b845181101561297d57600085828151811061290557612904613cfa565b5b602002602001015190508260070181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000155602082015181600101908161295c91906146a6565b5060408201518160020155505050808061297590613d6b565b9150506128e7565b507fdf54b3b6095f0e4bab834f1d5294b7cbcd9cd963191fb841d618e162d9f56fce600254338c8c87878c8c8c6040516129bf99989796959493929190614778565b60405180910390a1505050600160008190555050505050505050565b600080600090505b8251811015612a27578281815181106129ff576129fe613cfa565b5b602002602001015182612a129190613a89565b91508080612a1f90613d6b565b9150506129e3565b50919050565b60008060036000858152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b82821015612b9e57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015612b2e57602002820191906000526020600020905b815481526020019060010190808311612b1a575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015612b8657602002820191906000526020600020905b815481526020019060010190808311612b72575b50505050508152505081526020019060010190612a66565b50505050905060005b8151811015612c25576000828281518110612bc557612bc4613cfa565b5b60200260200101516000015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612c1157819350505050612c4b565b508080612c1d90613d6b565b915050612ba7565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b92915050565b612ce781604051602401612c6591906131f2565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612cea565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b828054828255906000526020600020908101928215612d4f579160200282015b82811115612d4e578251825591602001919060010190612d33565b5b509050612d5c9190612d60565b5090565b5b80821115612d79576000816000905550600101612d61565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612da481612d91565b8114612daf57600080fd5b50565b600081359050612dc181612d9b565b92915050565b600060208284031215612ddd57612ddc612d87565b5b6000612deb84828501612db2565b91505092915050565b612dfd81612d91565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612e2e82612e03565b9050919050565b612e3e81612e23565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e7e578082015181840152602081019050612e63565b60008484015250505050565b6000601f19601f8301169050919050565b6000612ea682612e44565b612eb08185612e4f565b9350612ec0818560208601612e60565b612ec981612e8a565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612f1457612f13612ed4565b5b50565b6000819050612f2582612f03565b919050565b6000612f3582612f17565b9050919050565b612f4581612f2a565b82525050565b60038110612f5c57612f5b612ed4565b5b50565b6000819050612f6d82612f4b565b919050565b6000612f7d82612f5f565b9050919050565b612f8d81612f72565b82525050565b600061010082019050612fa9600083018b612df4565b612fb6602083018a612e35565b8181036040830152612fc88189612e9b565b90508181036060830152612fdc8188612e9b565b9050612feb6080830187612f3c565b612ff860a0830186612f84565b61300560c0830185612df4565b61301260e0830184612df4565b9998505050505050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61305c82612e8a565b810181811067ffffffffffffffff8211171561307b5761307a613024565b5b80604052505050565b600061308e612d7d565b905061309a8282613053565b919050565b600067ffffffffffffffff8211156130ba576130b9613024565b5b602082029050602081019050919050565b600080fd5b60006130e36130de8461309f565b613084565b90508083825260208201905060208402830185811115613106576131056130cb565b5b835b8181101561312f578061311b8882612db2565b845260208401935050602081019050613108565b5050509392505050565b600082601f83011261314e5761314d61301f565b5b813561315e8482602086016130d0565b91505092915050565b6000806000606084860312156131805761317f612d87565b5b600061318e86828701612db2565b935050602084013567ffffffffffffffff8111156131af576131ae612d8c565b5b6131bb86828701613139565b925050604084013567ffffffffffffffff8111156131dc576131db612d8c565b5b6131e886828701613139565b9150509250925092565b60006020820190506132076000830184612df4565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61324281612e23565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61327d81612d91565b82525050565b600061328f8383613274565b60208301905092915050565b6000602082019050919050565b60006132b382613248565b6132bd8185613253565b93506132c883613264565b8060005b838110156132f95781516132e08882613283565b97506132eb8361329b565b9250506001810190506132cc565b5085935050505092915050565b600060608301600083015161331e6000860182613239565b506020830151848203602086015261333682826132a8565b9150506040830151848203604086015261335082826132a8565b9150508091505092915050565b60006133698383613306565b905092915050565b6000602082019050919050565b60006133898261320d565b6133938185613218565b9350836020820285016133a585613229565b8060005b858110156133e157848403895281516133c2858261335d565b94506133cd83613371565b925060208a019950506001810190506133a9565b50829750879550505050505092915050565b6000602082019050818103600083015261340d818461337e565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061345d82612e44565b6134678185613441565b9350613477818560208601612e60565b61348081612e8a565b840191505092915050565b60006060830160008301516134a36000860182613274565b50602083015184820360208601526134bb8282613452565b91505060408301516134d06040860182613274565b508091505092915050565b60006134e7838361348b565b905092915050565b6000602082019050919050565b600061350782613415565b6135118185613420565b93508360208202850161352385613431565b8060005b8581101561355f578484038952815161354085826134db565b945061354b836134ef565b925060208a01995050600181019050613527565b50829750879550505050505092915050565b6000602082019050818103600083015261358b81846134fc565b905092915050565b6000806000606084860312156135ac576135ab612d87565b5b60006135ba86828701612db2565b93505060206135cb86828701612db2565b92505060406135dc86828701612db2565b9150509250925092565b600080fd5b600067ffffffffffffffff82111561360657613605613024565b5b61360f82612e8a565b9050602081019050919050565b82818337600083830152505050565b600061363e613639846135eb565b613084565b90508281526020810184848401111561365a576136596135e6565b5b61366584828561361c565b509392505050565b600082601f8301126136825761368161301f565b5b813561369284826020860161362b565b91505092915050565b600067ffffffffffffffff8211156136b6576136b5613024565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000606082840312156136e7576136e66136c7565b5b6136f16060613084565b9050600061370184828501612db2565b600083015250602082013567ffffffffffffffff811115613725576137246136cc565b5b6137318482850161366d565b602083015250604061374584828501612db2565b60408301525092915050565b600061376461375f8461369b565b613084565b90508083825260208201905060208402830185811115613787576137866130cb565b5b835b818110156137ce57803567ffffffffffffffff8111156137ac576137ab61301f565b5b8086016137b989826136d1565b85526020850194505050602081019050613789565b5050509392505050565b600082601f8301126137ed576137ec61301f565b5b81356137fd848260208601613751565b91505092915050565b600080600080600080600060e0888a03121561382557613824612d87565b5b600088013567ffffffffffffffff81111561384357613842612d8c565b5b61384f8a828b0161366d565b975050602088013567ffffffffffffffff8111156138705761386f612d8c565b5b61387c8a828b0161366d565b965050604061388d8a828b01612db2565b955050606061389e8a828b01612db2565b94505060806138af8a828b01612db2565b93505060a06138c08a828b01612db2565b92505060c088013567ffffffffffffffff8111156138e1576138e0612d8c565b5b6138ed8a828b016137d8565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061394357607f821691505b602082108103613956576139556138fc565b5b50919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613992601f83612e4f565b915061399d8261395c565b602082019050919050565b600060208201905081810360008301526139c181613985565b9050919050565b7f71756164726174696320766f74696e67206e6f7420616c6c6f77656420666f7260008201527f207468652070726f706f73616c00000000000000000000000000000000000000602082015250565b6000613a24602d83612e4f565b9150613a2f826139c8565b604082019050919050565b60006020820190508181036000830152613a5381613a17565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613a9482612d91565b9150613a9f83612d91565b9250828201905080821115613ab757613ab6613a5a565b5b92915050565b7f50726f706f73616c2068617320636c6f73656400000000000000000000000000600082015250565b6000613af3601383612e4f565b9150613afe82613abd565b602082019050919050565b60006020820190508181036000830152613b2281613ae6565b9050919050565b7f596f7527766520766f74656420616c7265616479000000000000000000000000600082015250565b6000613b5f601483612e4f565b9150613b6a82613b29565b602082019050919050565b60006020820190508181036000830152613b8e81613b52565b9050919050565b6000602082019050613baa6000830184612e35565b92915050565b600081519050613bbf81612d9b565b92915050565b600060208284031215613bdb57613bda612d87565b5b6000613be984828501613bb0565b91505092915050565b7f496e73756666696369656e7420566f74696e6720506f77657200000000000000600082015250565b6000613c28601983612e4f565b9150613c3382613bf2565b602082019050919050565b60006020820190508181036000830152613c5781613c1b565b9050919050565b6000606082019050613c736000830186612e35565b613c806020830185612e35565b613c8d6040830184612df4565b949350505050565b60008115159050919050565b613caa81613c95565b8114613cb557600080fd5b50565b600081519050613cc781613ca1565b92915050565b600060208284031215613ce357613ce2612d87565b5b6000613cf184828501613cb8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613d3482612d91565b9150613d3f83612d91565b9250828202613d4d81612d91565b91508282048414831517613d6457613d63613a5a565b5b5092915050565b6000613d7682612d91565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613da857613da7613a5a565b5b600182019050919050565b6000606083016000830151613dcb6000860182613239565b5060208301518482036020860152613de382826132a8565b91505060408301518482036040860152613dfd82826132a8565b9150508091505092915050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b6000613e54613e4f83613e2a565b613e37565b9050919050565b60008190508160005260206000209050919050565b60008154613e7d8161392b565b613e878186613441565b94506001821660008114613ea25760018114613eb857613eeb565b60ff198316865281151560200286019350613eeb565b613ec185613e5b565b60005b83811015613ee357815481890152600182019150602081019050613ec4565b808801955050505b50505092915050565b6000606083016000808401549050613f0b81613e41565b613f186000870182613274565b50600184018583036020870152613f2f8382613e70565b92505060028401549050613f4281613e41565b613f4f6040870182613274565b50819250505092915050565b6000613f678383613ef4565b905092915050565b6000600382019050919050565b6000613f8782613e0a565b613f918185613420565b935083602082028501613fa385613e15565b8060005b85811015613fde57848403895281613fbf8582613f5b565b9450613fca83613f6f565b925060208a01995050600181019050613fa7565b50829750879550505050505092915050565b60006060820190506140056000830186612df4565b81810360208301526140178185613db3565b9050818103604083015261402b8184613f7c565b9050949350505050565b600082825260208201905092915050565b600061405182613248565b61405b8185614035565b935061406683613264565b8060005b8381101561409757815161407e8882613283565b97506140898361329b565b92505060018101905061406a565b5085935050505092915050565b600081549050919050565b60008190508160005260206000209050919050565b6000600382019050919050565b60006140dc826140a4565b6140e68185613420565b9350836020820285016140f8856140af565b8060005b85811015614133578484038952816141148582613f5b565b945061411f836140c4565b925060208a019950506001810190506140fc565b50829750879550505050505092915050565b600060a08201905061415a6000830188612df4565b818103602083015261416c8187614046565b905081810360408301526141808186614046565b905061418f6060830185612e35565b81810360808301526141a181846140d1565b90509695505050505050565b7f776569676874656420766f74696e67206e6f7420616c6c6f77656420666f722060008201527f7468652070726f706f73616c0000000000000000000000000000000000000000602082015250565b6000614209602c83612e4f565b9150614214826141ad565b604082019050919050565b60006020820190508181036000830152614238816141fc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061427982612d91565b915061428483612d91565b9250826142945761429361423f565b5b828204905092915050565b7f73696e676c652063686f69636520766f74696e67206e6f7420616c6c6f77656460008201527f20666f72207468652070726f706f73616c000000000000000000000000000000602082015250565b60006142fb603183612e4f565b91506143068261429f565b604082019050919050565b6000602082019050818103600083015261432a816142ee565b9050919050565b7f496e73756666696369656e7420766f74696e6720506f77657200000000000000600082015250565b6000614367601983612e4f565b915061437282614331565b602082019050919050565b600060208201905081810360008301526143968161435a565b9050919050565b60006060820190506143b26000830186612df4565b81810360208301526143c48185613db3565b905081810360408301526143d881846140d1565b9050949350505050565b60006040820190506143f76000830185612df4565b6144046020830184612e35565b9392505050565b7f4d696e696d756d206f662035204c4152206973206e656564656420746f20637260008201527f6561746520612070726f706f73616c0000000000000000000000000000000000602082015250565b6000614467602f83612e4f565b91506144728261440b565b604082019050919050565b600060208201905081810360008301526144968161445a565b9050919050565b6000819050919050565b6000819050919050565b60006144cc6144c76144c28461449d565b6144a7565b612d91565b9050919050565b6144dc816144b1565b82525050565b60006060820190506144f76000830186612e35565b6145046020830185612e35565b61451160408301846144d3565b949350505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026145667fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614529565b6145708683614529565b95508019841693508086168417925050509392505050565b60006145a361459e61459984612d91565b6144a7565b612d91565b9050919050565b6000819050919050565b6145bd83614588565b6145d16145c9826145aa565b848454614536565b825550505050565b600090565b6145e66145d9565b6145f18184846145b4565b505050565b5b818110156146155761460a6000826145de565b6001810190506145f7565b5050565b601f82111561465a5761462b81613e5b565b61463484614519565b81016020851015614643578190505b61465761464f85614519565b8301826145f6565b50505b505050565b600082821c905092915050565b600061467d6000198460080261465f565b1980831691505092915050565b6000614696838361466c565b9150826002028217905092915050565b6146af82612e44565b67ffffffffffffffff8111156146c8576146c7613024565b5b6146d2825461392b565b6146dd828285614619565b600060209050601f83116001811461471057600084156146fe578287015190505b614708858261468a565b865550614770565b601f19841661471e86613e5b565b60005b8281101561474657848901518255600182019150602085019450602081019050614721565b86831015614763578489015161475f601f89168261466c565b8355505b6001600288020188555050505b505050505050565b60006101208201905061478e600083018c612df4565b61479b602083018b612e35565b81810360408301526147ad818a612e9b565b905081810360608301526147c18189612e9b565b90506147d06080830188612f3c565b6147dd60a0830187612f84565b6147ea60c0830186612df4565b6147f760e0830185612df4565b81810361010083015261480a81846134fc565b90509a995050505050505050505056fea264697066735822122069a422dfc93a4d4d99e04f80e9e962e8f58c9a945ae645e461d11ea68ecd4ca264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806386b646f21161005b57806386b646f21461012c5780638915b3fb1461015c5780639a2341751461018c578063e1665994146101a857610088565b8063013cf08b1461008d5780632d2a1544146100c457806350d2d30a146100e0578063677342ce146100fc575b600080fd5b6100a760048036038101906100a29190612dc7565b6101c4565b6040516100bb989796959493929190612f93565b60405180910390f35b6100de60048036038101906100d99190613167565b610356565b005b6100fa60048036038101906100f59190613167565b610e21565b005b61011660048036038101906101119190612dc7565b6117f6565b60405161012391906131f2565b60405180910390f35b61014660048036038101906101419190612dc7565b611870565b60405161015391906133f3565b60405180910390f35b61017660048036038101906101719190612dc7565b6119eb565b6040516101839190613571565b60405180910390f35b6101a660048036038101906101a19190613593565b611b06565b005b6101c260048036038101906101bd9190613806565b612595565b005b60036020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020180546102139061392b565b80601f016020809104026020016040519081016040528092919081815260200182805461023f9061392b565b801561028c5780601f106102615761010080835404028352916020019161028c565b820191906000526020600020905b81548152906001019060200180831161026f57829003601f168201915b5050505050908060030180546102a19061392b565b80601f01602080910402602001604051908101604052809291908181526020018280546102cd9061392b565b801561031a5780601f106102ef5761010080835404028352916020019161031a565b820191906000526020600020905b8154815290600101906020018083116102fd57829003601f168201915b5050505050908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16908060050154908060060154905088565b60026000540361039b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610392906139a8565b60405180910390fd5b600260008190555060006103ae826129db565b905060006103bc8533612a2d565b905060006003600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461044f9061392b565b80601f016020809104026020016040519081016040528092919081815260200182805461047b9061392b565b80156104c85780601f1061049d576101008083540402835291602001916104c8565b820191906000526020600020905b8154815290600101906020018083116104ab57829003601f168201915b505050505081526020016003820180546104e19061392b565b80601f016020809104026020016040519081016040528092919081815260200182805461050d9061392b565b801561055a5780601f1061052f5761010080835404028352916020019161055a565b820191906000526020600020905b81548152906001019060200180831161053d57829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561058857610587612ed4565b5b600281111561059a57610599612ed4565b5b81526020016004820160019054906101000a900460ff1660028111156105c3576105c2612ed4565b5b60028111156105d5576105d4612ed4565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156106ea57838290600052602060002090600302016040518060600160405290816000820154815260200160018201805461064f9061392b565b80601f016020809104026020016040519081016040528092919081815260200182805461067b9061392b565b80156106c85780601f1061069d576101008083540402835291602001916106c8565b820191906000526020600020905b8154815290600101906020018083116106ab57829003601f168201915b5050505050815260200160028201548152505081526020019060010190610612565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561084f57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156107df57602002820191906000526020600020905b8154815260200190600101908083116107cb575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561083757602002820191906000526020600020905b815481526020019060010190808311610823575b50505050508152505081526020019060010190610717565b5050505081525050905060028081111561086c5761086b612ed4565b5b8160800151600281111561088357610882612ed4565b5b146108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba90613a3a565b60405180910390fd5b8060e001518160c001516108d79190613a89565b4210610918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090f90613b09565b60405180910390fd5b6000821261095b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095290613b75565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016109b79190613b95565b602060405180830381865afa1580156109d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f89190613bc5565b1015610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3090613c3e565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610a9893929190613c5e565b6020604051808303816000875af1158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb9190613ccd565b50600060036000888152602001908152602001600020600701905060005b8651811015610bc7576000878281518110610b1757610b16613cfa565b5b602002602001015190506000878381518110610b3657610b35613cfa565b5b60200260200101519050610b60633b9aca00610b51836117f6565b610b5b9190613d29565b612c51565b633b9aca00610b6e826117f6565b610b789190613d29565b848381548110610b8b57610b8a613cfa565b5b90600052602060002090600302016002016000828254610bab9190613a89565b9250508190555050508080610bbf90613d6b565b915050610af9565b506000855167ffffffffffffffff811115610be557610be4613024565b5b604051908082528060200260200182016040528015610c135781602001602082028036833780820191505090505b50905060005b8651811015610c8657633b9aca00610c4a888381518110610c3d57610c3c613cfa565b5b60200260200101516117f6565b610c549190613d29565b828281518110610c6757610c66613cfa565b5b6020026020010181815250508080610c7e90613d6b565b915050610c19565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001898152602001838152509050600360008a815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610d5f929190612d13565b506040820151816002019080519060200190610d7c929190612d13565b5050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e92898285604051610db293929190613ff0565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489838a33600360008f8152602001908152602001600020600701604051610e06959493929190614145565b60405180910390a15050505050506001600081905550505050565b600260005403610e66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5d906139a8565b60405180910390fd5b60026000819055506000610e79826129db565b90506000610e878533612a2d565b905060006003600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610f1a9061392b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f469061392b565b8015610f935780601f10610f6857610100808354040283529160200191610f93565b820191906000526020600020905b815481529060010190602001808311610f7657829003601f168201915b50505050508152602001600382018054610fac9061392b565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd89061392b565b80156110255780601f10610ffa57610100808354040283529160200191611025565b820191906000526020600020905b81548152906001019060200180831161100857829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561105357611052612ed4565b5b600281111561106557611064612ed4565b5b81526020016004820160019054906101000a900460ff16600281111561108e5761108d612ed4565b5b60028111156110a05761109f612ed4565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156111b557838290600052602060002090600302016040518060600160405290816000820154815260200160018201805461111a9061392b565b80601f01602080910402602001604051908101604052809291908181526020018280546111469061392b565b80156111935780601f1061116857610100808354040283529160200191611193565b820191906000526020600020905b81548152906001019060200180831161117657829003601f168201915b50505050508152602001600282015481525050815260200190600101906110dd565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561131a57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156112aa57602002820191906000526020600020905b815481526020019060010190808311611296575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561130257602002820191906000526020600020905b8154815260200190600101908083116112ee575b505050505081525050815260200190600101906111e2565b505050508152505090506001600281111561133857611337612ed4565b5b8160800151600281111561134f5761134e612ed4565b5b1461138f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113869061421f565b60405180910390fd5b8060e001518160c001516113a39190613a89565b42106113e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113db90613b09565b60405180910390fd5b60008212611427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141e90613b75565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016114839190613b95565b602060405180830381865afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c49190613bc5565b1015611505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fc90613c3e565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161156493929190613c5e565b6020604051808303816000875af1158015611583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a79190613ccd565b50600060036000888152602001908152602001600020600701905060005b865181101561165c5760008782815181106115e3576115e2613cfa565b5b60200260200101519050600087838151811061160257611601613cfa565b5b60200260200101519050808483815481106116205761161f613cfa565b5b906000526020600020906003020160020160008282546116409190613a89565b925050819055505050808061165490613d6b565b9150506115c5565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781525090506003600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190611735929190612d13565b506040820151816002019080519060200190611752929190612d13565b5050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e9288828460405161178893929190613ff0565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266488878933600360008e81526020019081526020016000206007016040516117dc959493929190614145565b60405180910390a150505050506001600081905550505050565b6000600382111561185d5781905060006001600284611815919061426e565b61181f9190613a89565b90505b8181101561185757809150600281828561183c919061426e565b6118469190613a89565b611850919061426e565b9050611822565b5061186b565b6000821461186a57600190505b5b919050565b606060036000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156119e057838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561197057602002820191906000526020600020905b81548152602001906001019080831161195c575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156119c857602002820191906000526020600020905b8154815260200190600101908083116119b4575b505050505081525050815260200190600101906118a8565b505050509050919050565b606060036000838152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b82821015611afb578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054611a609061392b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8c9061392b565b8015611ad95780601f10611aae57610100808354040283529160200191611ad9565b820191906000526020600020905b815481529060010190602001808311611abc57829003601f168201915b5050505050815260200160028201548152505081526020019060010190611a23565b505050509050919050565b600260005403611b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b42906139a8565b60405180910390fd5b60026000819055506000611b5f8433612a2d565b905060006003600086815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054611bf29061392b565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1e9061392b565b8015611c6b5780601f10611c4057610100808354040283529160200191611c6b565b820191906000526020600020905b815481529060010190602001808311611c4e57829003601f168201915b50505050508152602001600382018054611c849061392b565b80601f0160208091040260200160405190810160405280929190818152602001828054611cb09061392b565b8015611cfd5780601f10611cd257610100808354040283529160200191611cfd565b820191906000526020600020905b815481529060010190602001808311611ce057829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115611d2b57611d2a612ed4565b5b6002811115611d3d57611d3c612ed4565b5b81526020016004820160019054906101000a900460ff166002811115611d6657611d65612ed4565b5b6002811115611d7857611d77612ed4565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015611e8d578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054611df29061392b565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1e9061392b565b8015611e6b5780601f10611e4057610100808354040283529160200191611e6b565b820191906000526020600020905b815481529060010190602001808311611e4e57829003601f168201915b5050505050815260200160028201548152505081526020019060010190611db5565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015611ff257838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015611f8257602002820191906000526020600020905b815481526020019060010190808311611f6e575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611fda57602002820191906000526020600020905b815481526020019060010190808311611fc6575b50505050508152505081526020019060010190611eba565b50505050815250509050600060028111156120105761200f612ed4565b5b8160800151600281111561202757612026612ed4565b5b14612067576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205e90614311565b60405180910390fd5b8060e001518160c0015161207b9190613a89565b42106120bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b390613b09565b60405180910390fd5b600082126120ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f690613b75565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161215b9190613b95565b602060405180830381865afa158015612178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219c9190613bc5565b10156121dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d49061437d565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161223c93929190613c5e565b6020604051808303816000875af115801561225b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227f9190613ccd565b50826003600087815260200190815260200160002060070185815481106122a9576122a8613cfa565b5b906000526020600020906003020160020160008282546122c99190613a89565b925050819055506000600167ffffffffffffffff8111156122ed576122ec613024565b5b60405190808252806020026020018201604052801561231b5781602001602082028036833780820191505090505b509050848160008151811061233357612332613cfa565b5b6020026020010181815250506000600167ffffffffffffffff81111561235c5761235b613024565b5b60405190808252806020026020018201604052801561238a5781602001602082028036833780820191505090505b50905084816000815181106123a2576123a1613cfa565b5b602002602001018181525050600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381525090506003600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190612486929190612d13565b5060408201518160020190805190602001906124a3929190612d13565b5050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928882600360008c81526020019081526020016000206007016040516124ee9392919061439d565b60405180910390a17f15ee2336b150a2ac9a8dc3209e14074c62564ed20d671cf7463ce9dd78a5e9c588336040516125279291906143e2565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266488838533600360008e815260200190815260200160002060070160405161257b959493929190614145565b60405180910390a150505050506001600081905550505050565b6002600054036125da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d1906139a8565b60405180910390fd5b6002600081905550674563918244f40000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016126469190613b95565b602060405180830381865afa158015612663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126879190613bc5565b10156126c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126bf9061447d565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330674563918244f400006040518463ffffffff1660e01b815260040161272f939291906144e2565b6020604051808303816000875af115801561274e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127729190613ccd565b50600080860361278557600090506127a5565b6001860361279657600190506127a4565b600286036127a357600290505b5b5b60008086036127b757600090506127d7565b600186036127c857600190506127d6565b600286036127d557600290505b5b5b600260008154809291906127ea90613d6b565b9190505550600060036000600254815260200190815260200160002090506002548160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508981600201908161286791906146a6565b508881600301908161287991906146a6565b50828160040160006101000a81548160ff021916908360028111156128a1576128a0612ed4565b5b0217905550818160040160016101000a81548160ff021916908360028111156128cd576128cc612ed4565b5b021790555085816005018190555084816006018190555060005b845181101561297d57600085828151811061290557612904613cfa565b5b602002602001015190508260070181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000155602082015181600101908161295c91906146a6565b5060408201518160020155505050808061297590613d6b565b9150506128e7565b507fdf54b3b6095f0e4bab834f1d5294b7cbcd9cd963191fb841d618e162d9f56fce600254338c8c87878c8c8c6040516129bf99989796959493929190614778565b60405180910390a1505050600160008190555050505050505050565b600080600090505b8251811015612a27578281815181106129ff576129fe613cfa565b5b602002602001015182612a129190613a89565b91508080612a1f90613d6b565b9150506129e3565b50919050565b60008060036000858152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b82821015612b9e57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015612b2e57602002820191906000526020600020905b815481526020019060010190808311612b1a575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015612b8657602002820191906000526020600020905b815481526020019060010190808311612b72575b50505050508152505081526020019060010190612a66565b50505050905060005b8151811015612c25576000828281518110612bc557612bc4613cfa565b5b60200260200101516000015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612c1157819350505050612c4b565b508080612c1d90613d6b565b915050612ba7565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b92915050565b612ce781604051602401612c6591906131f2565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612cea565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b828054828255906000526020600020908101928215612d4f579160200282015b82811115612d4e578251825591602001919060010190612d33565b5b509050612d5c9190612d60565b5090565b5b80821115612d79576000816000905550600101612d61565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612da481612d91565b8114612daf57600080fd5b50565b600081359050612dc181612d9b565b92915050565b600060208284031215612ddd57612ddc612d87565b5b6000612deb84828501612db2565b91505092915050565b612dfd81612d91565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612e2e82612e03565b9050919050565b612e3e81612e23565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e7e578082015181840152602081019050612e63565b60008484015250505050565b6000601f19601f8301169050919050565b6000612ea682612e44565b612eb08185612e4f565b9350612ec0818560208601612e60565b612ec981612e8a565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612f1457612f13612ed4565b5b50565b6000819050612f2582612f03565b919050565b6000612f3582612f17565b9050919050565b612f4581612f2a565b82525050565b60038110612f5c57612f5b612ed4565b5b50565b6000819050612f6d82612f4b565b919050565b6000612f7d82612f5f565b9050919050565b612f8d81612f72565b82525050565b600061010082019050612fa9600083018b612df4565b612fb6602083018a612e35565b8181036040830152612fc88189612e9b565b90508181036060830152612fdc8188612e9b565b9050612feb6080830187612f3c565b612ff860a0830186612f84565b61300560c0830185612df4565b61301260e0830184612df4565b9998505050505050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61305c82612e8a565b810181811067ffffffffffffffff8211171561307b5761307a613024565b5b80604052505050565b600061308e612d7d565b905061309a8282613053565b919050565b600067ffffffffffffffff8211156130ba576130b9613024565b5b602082029050602081019050919050565b600080fd5b60006130e36130de8461309f565b613084565b90508083825260208201905060208402830185811115613106576131056130cb565b5b835b8181101561312f578061311b8882612db2565b845260208401935050602081019050613108565b5050509392505050565b600082601f83011261314e5761314d61301f565b5b813561315e8482602086016130d0565b91505092915050565b6000806000606084860312156131805761317f612d87565b5b600061318e86828701612db2565b935050602084013567ffffffffffffffff8111156131af576131ae612d8c565b5b6131bb86828701613139565b925050604084013567ffffffffffffffff8111156131dc576131db612d8c565b5b6131e886828701613139565b9150509250925092565b60006020820190506132076000830184612df4565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61324281612e23565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61327d81612d91565b82525050565b600061328f8383613274565b60208301905092915050565b6000602082019050919050565b60006132b382613248565b6132bd8185613253565b93506132c883613264565b8060005b838110156132f95781516132e08882613283565b97506132eb8361329b565b9250506001810190506132cc565b5085935050505092915050565b600060608301600083015161331e6000860182613239565b506020830151848203602086015261333682826132a8565b9150506040830151848203604086015261335082826132a8565b9150508091505092915050565b60006133698383613306565b905092915050565b6000602082019050919050565b60006133898261320d565b6133938185613218565b9350836020820285016133a585613229565b8060005b858110156133e157848403895281516133c2858261335d565b94506133cd83613371565b925060208a019950506001810190506133a9565b50829750879550505050505092915050565b6000602082019050818103600083015261340d818461337e565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061345d82612e44565b6134678185613441565b9350613477818560208601612e60565b61348081612e8a565b840191505092915050565b60006060830160008301516134a36000860182613274565b50602083015184820360208601526134bb8282613452565b91505060408301516134d06040860182613274565b508091505092915050565b60006134e7838361348b565b905092915050565b6000602082019050919050565b600061350782613415565b6135118185613420565b93508360208202850161352385613431565b8060005b8581101561355f578484038952815161354085826134db565b945061354b836134ef565b925060208a01995050600181019050613527565b50829750879550505050505092915050565b6000602082019050818103600083015261358b81846134fc565b905092915050565b6000806000606084860312156135ac576135ab612d87565b5b60006135ba86828701612db2565b93505060206135cb86828701612db2565b92505060406135dc86828701612db2565b9150509250925092565b600080fd5b600067ffffffffffffffff82111561360657613605613024565b5b61360f82612e8a565b9050602081019050919050565b82818337600083830152505050565b600061363e613639846135eb565b613084565b90508281526020810184848401111561365a576136596135e6565b5b61366584828561361c565b509392505050565b600082601f8301126136825761368161301f565b5b813561369284826020860161362b565b91505092915050565b600067ffffffffffffffff8211156136b6576136b5613024565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000606082840312156136e7576136e66136c7565b5b6136f16060613084565b9050600061370184828501612db2565b600083015250602082013567ffffffffffffffff811115613725576137246136cc565b5b6137318482850161366d565b602083015250604061374584828501612db2565b60408301525092915050565b600061376461375f8461369b565b613084565b90508083825260208201905060208402830185811115613787576137866130cb565b5b835b818110156137ce57803567ffffffffffffffff8111156137ac576137ab61301f565b5b8086016137b989826136d1565b85526020850194505050602081019050613789565b5050509392505050565b600082601f8301126137ed576137ec61301f565b5b81356137fd848260208601613751565b91505092915050565b600080600080600080600060e0888a03121561382557613824612d87565b5b600088013567ffffffffffffffff81111561384357613842612d8c565b5b61384f8a828b0161366d565b975050602088013567ffffffffffffffff8111156138705761386f612d8c565b5b61387c8a828b0161366d565b965050604061388d8a828b01612db2565b955050606061389e8a828b01612db2565b94505060806138af8a828b01612db2565b93505060a06138c08a828b01612db2565b92505060c088013567ffffffffffffffff8111156138e1576138e0612d8c565b5b6138ed8a828b016137d8565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061394357607f821691505b602082108103613956576139556138fc565b5b50919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613992601f83612e4f565b915061399d8261395c565b602082019050919050565b600060208201905081810360008301526139c181613985565b9050919050565b7f71756164726174696320766f74696e67206e6f7420616c6c6f77656420666f7260008201527f207468652070726f706f73616c00000000000000000000000000000000000000602082015250565b6000613a24602d83612e4f565b9150613a2f826139c8565b604082019050919050565b60006020820190508181036000830152613a5381613a17565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613a9482612d91565b9150613a9f83612d91565b9250828201905080821115613ab757613ab6613a5a565b5b92915050565b7f50726f706f73616c2068617320636c6f73656400000000000000000000000000600082015250565b6000613af3601383612e4f565b9150613afe82613abd565b602082019050919050565b60006020820190508181036000830152613b2281613ae6565b9050919050565b7f596f7527766520766f74656420616c7265616479000000000000000000000000600082015250565b6000613b5f601483612e4f565b9150613b6a82613b29565b602082019050919050565b60006020820190508181036000830152613b8e81613b52565b9050919050565b6000602082019050613baa6000830184612e35565b92915050565b600081519050613bbf81612d9b565b92915050565b600060208284031215613bdb57613bda612d87565b5b6000613be984828501613bb0565b91505092915050565b7f496e73756666696369656e7420566f74696e6720506f77657200000000000000600082015250565b6000613c28601983612e4f565b9150613c3382613bf2565b602082019050919050565b60006020820190508181036000830152613c5781613c1b565b9050919050565b6000606082019050613c736000830186612e35565b613c806020830185612e35565b613c8d6040830184612df4565b949350505050565b60008115159050919050565b613caa81613c95565b8114613cb557600080fd5b50565b600081519050613cc781613ca1565b92915050565b600060208284031215613ce357613ce2612d87565b5b6000613cf184828501613cb8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613d3482612d91565b9150613d3f83612d91565b9250828202613d4d81612d91565b91508282048414831517613d6457613d63613a5a565b5b5092915050565b6000613d7682612d91565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613da857613da7613a5a565b5b600182019050919050565b6000606083016000830151613dcb6000860182613239565b5060208301518482036020860152613de382826132a8565b91505060408301518482036040860152613dfd82826132a8565b9150508091505092915050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b6000613e54613e4f83613e2a565b613e37565b9050919050565b60008190508160005260206000209050919050565b60008154613e7d8161392b565b613e878186613441565b94506001821660008114613ea25760018114613eb857613eeb565b60ff198316865281151560200286019350613eeb565b613ec185613e5b565b60005b83811015613ee357815481890152600182019150602081019050613ec4565b808801955050505b50505092915050565b6000606083016000808401549050613f0b81613e41565b613f186000870182613274565b50600184018583036020870152613f2f8382613e70565b92505060028401549050613f4281613e41565b613f4f6040870182613274565b50819250505092915050565b6000613f678383613ef4565b905092915050565b6000600382019050919050565b6000613f8782613e0a565b613f918185613420565b935083602082028501613fa385613e15565b8060005b85811015613fde57848403895281613fbf8582613f5b565b9450613fca83613f6f565b925060208a01995050600181019050613fa7565b50829750879550505050505092915050565b60006060820190506140056000830186612df4565b81810360208301526140178185613db3565b9050818103604083015261402b8184613f7c565b9050949350505050565b600082825260208201905092915050565b600061405182613248565b61405b8185614035565b935061406683613264565b8060005b8381101561409757815161407e8882613283565b97506140898361329b565b92505060018101905061406a565b5085935050505092915050565b600081549050919050565b60008190508160005260206000209050919050565b6000600382019050919050565b60006140dc826140a4565b6140e68185613420565b9350836020820285016140f8856140af565b8060005b85811015614133578484038952816141148582613f5b565b945061411f836140c4565b925060208a019950506001810190506140fc565b50829750879550505050505092915050565b600060a08201905061415a6000830188612df4565b818103602083015261416c8187614046565b905081810360408301526141808186614046565b905061418f6060830185612e35565b81810360808301526141a181846140d1565b90509695505050505050565b7f776569676874656420766f74696e67206e6f7420616c6c6f77656420666f722060008201527f7468652070726f706f73616c0000000000000000000000000000000000000000602082015250565b6000614209602c83612e4f565b9150614214826141ad565b604082019050919050565b60006020820190508181036000830152614238816141fc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061427982612d91565b915061428483612d91565b9250826142945761429361423f565b5b828204905092915050565b7f73696e676c652063686f69636520766f74696e67206e6f7420616c6c6f77656460008201527f20666f72207468652070726f706f73616c000000000000000000000000000000602082015250565b60006142fb603183612e4f565b91506143068261429f565b604082019050919050565b6000602082019050818103600083015261432a816142ee565b9050919050565b7f496e73756666696369656e7420766f74696e6720506f77657200000000000000600082015250565b6000614367601983612e4f565b915061437282614331565b602082019050919050565b600060208201905081810360008301526143968161435a565b9050919050565b60006060820190506143b26000830186612df4565b81810360208301526143c48185613db3565b905081810360408301526143d881846140d1565b9050949350505050565b60006040820190506143f76000830185612df4565b6144046020830184612e35565b9392505050565b7f4d696e696d756d206f662035204c4152206973206e656564656420746f20637260008201527f6561746520612070726f706f73616c0000000000000000000000000000000000602082015250565b6000614467602f83612e4f565b91506144728261440b565b604082019050919050565b600060208201905081810360008301526144968161445a565b9050919050565b6000819050919050565b6000819050919050565b60006144cc6144c76144c28461449d565b6144a7565b612d91565b9050919050565b6144dc816144b1565b82525050565b60006060820190506144f76000830186612e35565b6145046020830185612e35565b61451160408301846144d3565b949350505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026145667fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614529565b6145708683614529565b95508019841693508086168417925050509392505050565b60006145a361459e61459984612d91565b6144a7565b612d91565b9050919050565b6000819050919050565b6145bd83614588565b6145d16145c9826145aa565b848454614536565b825550505050565b600090565b6145e66145d9565b6145f18184846145b4565b505050565b5b818110156146155761460a6000826145de565b6001810190506145f7565b5050565b601f82111561465a5761462b81613e5b565b61463484614519565b81016020851015614643578190505b61465761464f85614519565b8301826145f6565b50505b505050565b600082821c905092915050565b600061467d6000198460080261465f565b1980831691505092915050565b6000614696838361466c565b9150826002028217905092915050565b6146af82612e44565b67ffffffffffffffff8111156146c8576146c7613024565b5b6146d2825461392b565b6146dd828285614619565b600060209050601f83116001811461471057600084156146fe578287015190505b614708858261468a565b865550614770565b601f19841661471e86613e5b565b60005b8281101561474657848901518255600182019150602085019450602081019050614721565b86831015614763578489015161475f601f89168261466c565b8355505b6001600288020188555050505b505050505050565b60006101208201905061478e600083018c612df4565b61479b602083018b612e35565b81810360408301526147ad818a612e9b565b905081810360608301526147c18189612e9b565b90506147d06080830188612f3c565b6147dd60a0830187612f84565b6147ea60c0830186612df4565b6147f760e0830185612df4565b81810361010083015261480a81846134fc565b90509a995050505050505050505056fea264697066735822122069a422dfc93a4d4d99e04f80e9e962e8f58c9a945ae645e461d11ea68ecd4ca264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Dao.sol:Dao",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 127,
        "contract": "contracts/Dao.sol:Dao",
        "label": "larToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)117"
      },
      {
        "astId": 129,
        "contract": "contracts/Dao.sol:Dao",
        "label": "proposalId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 242,
        "contract": "contracts/Dao.sol:Dao",
        "label": "proposals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Proposal)180_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Option)144_storage)dyn_storage": {
        "base": "t_struct(Option)144_storage",
        "encoding": "dynamic_array",
        "label": "struct Dao.Option[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Voter)153_storage)dyn_storage": {
        "base": "t_struct(Voter)153_storage",
        "encoding": "dynamic_array",
        "label": "struct Dao.Voter[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)117": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ProposalStatus)137": {
        "encoding": "inplace",
        "label": "enum Dao.ProposalStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ProposalType)133": {
        "encoding": "inplace",
        "label": "enum Dao.ProposalType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Proposal)180_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Dao.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)180_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Option)144_storage": {
        "encoding": "inplace",
        "label": "struct Dao.Option",
        "members": [
          {
            "astId": 139,
            "contract": "contracts/Dao.sol:Dao",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 141,
            "contract": "contracts/Dao.sol:Dao",
            "label": "optionText",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 143,
            "contract": "contracts/Dao.sol:Dao",
            "label": "vote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Proposal)180_storage": {
        "encoding": "inplace",
        "label": "struct Dao.Proposal",
        "members": [
          {
            "astId": 155,
            "contract": "contracts/Dao.sol:Dao",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 157,
            "contract": "contracts/Dao.sol:Dao",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 159,
            "contract": "contracts/Dao.sol:Dao",
            "label": "title",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 161,
            "contract": "contracts/Dao.sol:Dao",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 164,
            "contract": "contracts/Dao.sol:Dao",
            "label": "proposalType",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(ProposalType)133"
          },
          {
            "astId": 167,
            "contract": "contracts/Dao.sol:Dao",
            "label": "proposalStatus",
            "offset": 1,
            "slot": "4",
            "type": "t_enum(ProposalStatus)137"
          },
          {
            "astId": 169,
            "contract": "contracts/Dao.sol:Dao",
            "label": "startDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 171,
            "contract": "contracts/Dao.sol:Dao",
            "label": "duration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 175,
            "contract": "contracts/Dao.sol:Dao",
            "label": "options",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Option)144_storage)dyn_storage"
          },
          {
            "astId": 179,
            "contract": "contracts/Dao.sol:Dao",
            "label": "voters",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Voter)153_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Voter)153_storage": {
        "encoding": "inplace",
        "label": "struct Dao.Voter",
        "members": [
          {
            "astId": 146,
            "contract": "contracts/Dao.sol:Dao",
            "label": "voterAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 149,
            "contract": "contracts/Dao.sol:Dao",
            "label": "optionIndexes",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 152,
            "contract": "contracts/Dao.sol:Dao",
            "label": "optionVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}