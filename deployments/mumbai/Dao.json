{
  "address": "0x1d83054196558F3d15E81e12b2A7ebC624829a36",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "larTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum Dao.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum Dao.ProposalStatus",
          "name": "proposalStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Dao.Option[]",
          "name": "options",
          "type": "tuple[]"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Dao.Option[]",
          "name": "options",
          "type": "tuple[]"
        }
      ],
      "name": "QuadraticVote",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_proposalType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_proposalStatus",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "internalType": "struct Dao.Option[]",
          "name": "_options",
          "type": "tuple[]"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getOptions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "internalType": "struct Dao.Option[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getVoters",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "voterAddress",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "optionIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "optionVotes",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Dao.Voter[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "enum Dao.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        },
        {
          "internalType": "enum Dao.ProposalStatus",
          "name": "proposalStatus",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "sqrt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "z",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votingPower",
          "type": "uint256[]"
        }
      ],
      "name": "voteProposalByQuadratic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "voteProposalBySingleChoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votingPower",
          "type": "uint256[]"
        }
      ],
      "name": "voteProposalByWeighing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd014da0fb574853bcd546624add48c56ff07c9dd69991dd8804e251e5e8ce756",
  "receipt": {
    "to": null,
    "from": "0xDD4c43c13e6F1b2374Ed9AAabBA7D56Bb4a68A03",
    "contractAddress": "0x1d83054196558F3d15E81e12b2A7ebC624829a36",
    "transactionIndex": 19,
    "gasUsed": "3879830",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000002000000000000000000000000000000000000000000000000000a00000000000000000040100000000000000000000040000000200000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000040000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x5486d93f50ba70aed7b878af32ec6df77b4bc0f3c2fa3dc71550a0c1b407b828",
    "transactionHash": "0xd014da0fb574853bcd546624add48c56ff07c9dd69991dd8804e251e5e8ce756",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 28200873,
        "transactionHash": "0xd014da0fb574853bcd546624add48c56ff07c9dd69991dd8804e251e5e8ce756",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000dd4c43c13e6f1b2374ed9aaabba7d56bb4a68a03",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000160fa9060a6fa200000000000000000000000000000000000000000000000002bfad23ad9151c0000000000000000000000000000000000000000000000935348c96cf82bf271300000000000000000000000000000000000000000000000002a99d7aa786e21e00000000000000000000000000000000000000000000093534a2a67888c996b5",
        "logIndex": 116,
        "blockHash": "0x5486d93f50ba70aed7b878af32ec6df77b4bc0f3c2fa3dc71550a0c1b407b828"
      }
    ],
    "blockNumber": 28200873,
    "cumulativeGasUsed": "6868225",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7AB3bE7df12321Ab0f54FbbB5CECCC4a66ae2030"
  ],
  "numDeployments": 1,
  "solcInputHash": "eabeecad33dcbca9a687f12a018ad340",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"larTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum Dao.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum Dao.ProposalStatus\",\"name\":\"proposalStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Dao.Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Dao.Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"}],\"name\":\"QuadraticVote\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_proposalType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposalStatus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"struct Dao.Option[]\",\"name\":\"_options\",\"type\":\"tuple[]\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"struct Dao.Option[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getVoters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Dao.Voter[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum Dao.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"enum Dao.ProposalStatus\",\"name\":\"proposalStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votingPower\",\"type\":\"uint256[]\"}],\"name\":\"voteProposalByQuadratic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"voteProposalBySingleChoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votingPower\",\"type\":\"uint256[]\"}],\"name\":\"voteProposalByWeighing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dao.sol\":\"Dao\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Dao.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/*\\r\\ncreateQuadraticProposal()\\r\\ncreateWeightedProposal()\\r\\ncreateSingleChoiceProposal()\\r\\nvoteByQuadratic()\\r\\nvoteBySingleChoice()\\r\\nvoteByWeighted()\\r\\n\\r\\n */\\r\\ncontract Dao is ReentrancyGuard {\\r\\n    IERC20 larToken;\\r\\n    uint256 proposalId;\\r\\n\\r\\n    enum ProposalType {\\r\\n        SingleChoice,\\r\\n        Weighted,\\r\\n        Quadratic\\r\\n    }\\r\\n\\r\\n    enum ProposalStatus {\\r\\n        Pending,\\r\\n        Active,\\r\\n        Closed\\r\\n    }\\r\\n\\r\\n    struct Option {\\r\\n        uint256 index;\\r\\n        string optionText;\\r\\n        uint256 vote;\\r\\n    }\\r\\n\\r\\n    struct Voter {\\r\\n        address voterAddress;\\r\\n        uint[] optionIndexes;\\r\\n        uint[] optionVotes;\\r\\n    }\\r\\n\\r\\n    struct Proposal {\\r\\n        uint256 id;\\r\\n        address creator;\\r\\n        string title;\\r\\n        string description;\\r\\n        ProposalType proposalType;\\r\\n        ProposalStatus proposalStatus;\\r\\n        uint256 startDate;\\r\\n        uint256 duration;\\r\\n        Option[] options;\\r\\n        Voter[] voters;\\r\\n    }\\r\\n\\r\\n    event ProposalCreated(\\r\\n        uint256 id,\\r\\n        address creator,\\r\\n        string title,\\r\\n        string description,\\r\\n        ProposalType proposalType,\\r\\n        ProposalStatus proposalStatus,\\r\\n        uint256 startDate,\\r\\n        uint256 duration,\\r\\n        Option[] options\\r\\n    );\\r\\n\\r\\n    event QuadraticVote(uint256 id, address voter, Option[] options);\\r\\n\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n\\r\\n    constructor(address larTokenAddress) {\\r\\n        larToken = IERC20(larTokenAddress);\\r\\n    }\\r\\n\\r\\n    function createProposal(\\r\\n        string memory _title,\\r\\n        string memory _description,\\r\\n        uint256 _proposalType,\\r\\n        uint256 _proposalStatus,\\r\\n        uint256 _startDate,\\r\\n        uint256 _duration,\\r\\n        Option[] memory _options\\r\\n    ) external nonReentrant {\\r\\n        require(\\r\\n            larToken.balanceOf(msg.sender) >= 5e18,\\r\\n            \\\"Minimum of 5 LAR is needed to create a proposal\\\"\\r\\n        );\\r\\n\\r\\n        larToken.transferFrom(msg.sender, address(this), 5e18);\\r\\n\\r\\n        ProposalType proposalType;\\r\\n        if (_proposalType == 0) {\\r\\n            proposalType = ProposalType.SingleChoice;\\r\\n        } else if (_proposalType == 1) {\\r\\n            proposalType = ProposalType.Weighted;\\r\\n        } else if (_proposalType == 2) {\\r\\n            proposalType = ProposalType.Quadratic;\\r\\n        }\\r\\n\\r\\n        ProposalStatus proposalStatus;\\r\\n        if (_proposalStatus == 0) {\\r\\n            proposalStatus = ProposalStatus.Pending;\\r\\n        } else if (_proposalStatus == 1) {\\r\\n            proposalStatus = ProposalStatus.Active;\\r\\n        } else if (_proposalStatus == 2) {\\r\\n            proposalStatus = ProposalStatus.Closed;\\r\\n        }\\r\\n\\r\\n        proposalId++;\\r\\n\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        proposal.id = proposalId;\\r\\n        proposal.creator = msg.sender;\\r\\n        proposal.title = _title;\\r\\n        proposal.description = _description;\\r\\n        proposal.proposalType = proposalType;\\r\\n        proposal.proposalStatus = proposalStatus;\\r\\n        proposal.startDate = _startDate;\\r\\n        proposal.duration = _duration;\\r\\n\\r\\n\\r\\n        for (uint256 i = 0; i < _options.length; i++) {\\r\\n            Option memory currentOption = _options[i];\\r\\n            // console.log(\\\"This is the current option: \\\", currentOption.optionText);\\r\\n            proposal.options.push(currentOption);\\r\\n        }\\r\\n\\r\\n        emit ProposalCreated(\\r\\n            proposalId,\\r\\n            msg.sender,\\r\\n            _title,\\r\\n            _description,\\r\\n            proposalType,\\r\\n            proposalStatus,\\r\\n            _startDate,\\r\\n            _duration,\\r\\n            _options\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getOptions(uint256 id) external view returns (Option[] memory) {\\r\\n        return proposals[id].options;\\r\\n    }\\r\\n\\r\\n    function getVoters(uint256 id) external view returns (Voter[] memory) {\\r\\n        return proposals[id].voters;\\r\\n    }\\r\\n\\r\\n    function voteProposalByQuadratic(\\r\\n        uint256 id,\\r\\n        uint256[] memory indexes,\\r\\n        uint256[] memory votingPower\\r\\n    ) external nonReentrant {\\r\\n        uint256 totalVotingPower = getTotalVotingPower(votingPower);\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = proposals[id];\\r\\n\\r\\n        require(proposal.proposalType == ProposalType.Quadratic, \\\"quadratic voting not allowed for the proposal\\\");\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal has closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"You've voted already\\\");\\r\\n        require(\\r\\n            larToken.balanceOf(msg.sender) >= totalVotingPower,\\r\\n            \\\"Insufficient Voting Power\\\"\\r\\n        );\\r\\n        larToken.transferFrom(msg.sender, address(this), totalVotingPower);\\r\\n\\r\\n        Option[] storage options = proposals[id].options;\\r\\n\\r\\n        for (uint256 i = 0; i < indexes.length; i++) {\\r\\n            uint256 currentOptionIndex = indexes[i];\\r\\n            uint256 currentOptionVotingPower = votingPower[i];\\r\\n            console.log(sqrt(currentOptionVotingPower) * (10**9));\\r\\n            options[currentOptionIndex].vote += sqrt(currentOptionVotingPower) * (10**9);\\r\\n        }\\r\\n\\r\\n        uint[] memory optionVotes = new uint[](votingPower.length);\\r\\n        for (uint i = 0; i < votingPower.length; i++){\\r\\n            optionVotes[i] = sqrt(votingPower[i]) * (10**9);\\r\\n        }\\r\\n\\r\\n        Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: indexes,\\r\\n            optionVotes: optionVotes\\r\\n        });\\r\\n\\r\\n        proposals[id].voters.push(voter);\\r\\n\\r\\n        emit QuadraticVote(id, msg.sender, options);\\r\\n    }\\r\\n\\r\\n    function voteProposalBySingleChoice(\\r\\n        uint256 id,\\r\\n        uint256 index,\\r\\n        uint256 votingPower\\r\\n    ) external nonReentrant {\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = proposals[id];\\r\\n\\r\\n        require(proposal.proposalType == ProposalType.SingleChoice, \\\"single choice voting not allowed for the proposal\\\");\\r\\n\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal has closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"You've voted already\\\");\\r\\n        require(\\r\\n            larToken.balanceOf(msg.sender) >= votingPower,\\r\\n            \\\"Insufficient voting Power\\\"\\r\\n        );\\r\\n\\r\\n        larToken.transferFrom(msg.sender, address(this), votingPower);\\r\\n\\r\\n        proposals[id].options[index].vote += votingPower;\\r\\n        \\r\\n        uint[] memory optionIndex = new uint[](1);\\r\\n        optionIndex[0] = index;\\r\\n\\r\\n        uint[] memory optionVotes = new uint[](1);\\r\\n        optionVotes[0] = votingPower;\\r\\n\\r\\n         Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: optionIndex,\\r\\n            optionVotes: optionVotes\\r\\n        });\\r\\n\\r\\n        proposals[id].voters.push(voter);\\r\\n\\r\\n        // proposals[id].voters.push(msg.sender);\\r\\n    }\\r\\n\\r\\n    function voteProposalByWeighing(\\r\\n        uint256 id,\\r\\n        uint256[] memory indexes,\\r\\n        uint256[] memory votingPower\\r\\n    ) external nonReentrant {\\r\\n        uint256 totalVotingPower = getTotalVotingPower(votingPower);\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = proposals[id];\\r\\n\\r\\n        require(proposal.proposalType == ProposalType.Weighted, \\\"weighted voting not allowed for the proposal\\\");\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal has closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"You've voted already\\\");\\r\\n        require(\\r\\n            larToken.balanceOf(msg.sender) >= totalVotingPower,\\r\\n            \\\"Insufficient Voting Power\\\"\\r\\n        );\\r\\n        larToken.transferFrom(msg.sender, address(this), totalVotingPower);\\r\\n\\r\\n        Option[] storage options = proposals[id].options;\\r\\n\\r\\n        for (uint256 i = 0; i < indexes.length; i++) {\\r\\n            uint256 currentOptionIndex = indexes[i];\\r\\n            uint256 currentOptionVotingPower = votingPower[i];\\r\\n            options[currentOptionIndex].vote += currentOptionVotingPower;\\r\\n        }\\r\\n\\r\\n        // Voter[] voters = proposal.voters\\r\\n        Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: indexes,\\r\\n            optionVotes: votingPower\\r\\n        });\\r\\n\\r\\n        proposals[id].voters.push(voter);\\r\\n        \\r\\n\\r\\n        emit QuadraticVote(id, msg.sender, options);\\r\\n    }\\r\\n\\r\\n    function getTotalVotingPower(uint256[] memory votingPower)\\r\\n        internal\\r\\n        returns (uint256 totalVotingPower)\\r\\n    {\\r\\n        for (uint256 i = 0; i < votingPower.length; i++) {\\r\\n            totalVotingPower += votingPower[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkVotingStatus(uint256 id, address voter)\\r\\n        internal\\r\\n        view\\r\\n        returns (int256)\\r\\n    {\\r\\n        Voter[] memory voters = proposals[id].voters;\\r\\n        for (uint256 i = 0; i < voters.length; i++) {\\r\\n            address currentVoter = voters[i].voterAddress;\\r\\n            if (voter == currentVoter) {\\r\\n                return int256(i);\\r\\n            }\\r\\n        }\\r\\n        return -1;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 y) public pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9f02e332246a8d5c86d564d373857355b827397ffdc6237a29a4a64cc15772dd\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620045ba380380620045ba8339818101604052810190620000379190620000f1565b600160008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000123565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b9826200008c565b9050919050565b620000cb81620000ac565b8114620000d757600080fd5b50565b600081519050620000eb81620000c0565b92915050565b6000602082840312156200010a576200010962000087565b5b60006200011a84828501620000da565b91505092915050565b61448780620001336000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806386b646f21161005b57806386b646f21461012c5780638915b3fb1461015c5780639a2341751461018c578063e1665994146101a857610088565b8063013cf08b1461008d5780632d2a1544146100c457806350d2d30a146100e0578063677342ce146100fc575b600080fd5b6100a760048036038101906100a29190612c42565b6101c4565b6040516100bb989796959493929190612e0e565b60405180910390f35b6100de60048036038101906100d99190612fe2565b610356565b005b6100fa60048036038101906100f59190612fe2565b610dcd565b005b61011660048036038101906101119190612c42565b61174e565b604051610123919061306d565b60405180910390f35b61014660048036038101906101419190612c42565b6117c8565b604051610153919061326e565b60405180910390f35b61017660048036038101906101719190612c42565b611943565b60405161018391906133ec565b60405180910390f35b6101a660048036038101906101a1919061340e565b611a5e565b005b6101c260048036038101906101bd9190613681565b612410565b005b60036020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054610213906137a6565b80601f016020809104026020016040519081016040528092919081815260200182805461023f906137a6565b801561028c5780601f106102615761010080835404028352916020019161028c565b820191906000526020600020905b81548152906001019060200180831161026f57829003601f168201915b5050505050908060030180546102a1906137a6565b80601f01602080910402602001604051908101604052809291908181526020018280546102cd906137a6565b801561031a5780601f106102ef5761010080835404028352916020019161031a565b820191906000526020600020905b8154815290600101906020018083116102fd57829003601f168201915b5050505050908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16908060050154908060060154905088565b60026000540361039b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039290613823565b60405180910390fd5b600260008190555060006103ae82612856565b905060006103bc85336128a8565b905060006003600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461044f906137a6565b80601f016020809104026020016040519081016040528092919081815260200182805461047b906137a6565b80156104c85780601f1061049d576101008083540402835291602001916104c8565b820191906000526020600020905b8154815290600101906020018083116104ab57829003601f168201915b505050505081526020016003820180546104e1906137a6565b80601f016020809104026020016040519081016040528092919081815260200182805461050d906137a6565b801561055a5780601f1061052f5761010080835404028352916020019161055a565b820191906000526020600020905b81548152906001019060200180831161053d57829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561058857610587612d4f565b5b600281111561059a57610599612d4f565b5b81526020016004820160019054906101000a900460ff1660028111156105c3576105c2612d4f565b5b60028111156105d5576105d4612d4f565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156106ea57838290600052602060002090600302016040518060600160405290816000820154815260200160018201805461064f906137a6565b80601f016020809104026020016040519081016040528092919081815260200182805461067b906137a6565b80156106c85780601f1061069d576101008083540402835291602001916106c8565b820191906000526020600020905b8154815290600101906020018083116106ab57829003601f168201915b5050505050815260200160028201548152505081526020019060010190610612565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561084f57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156107df57602002820191906000526020600020905b8154815260200190600101908083116107cb575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561083757602002820191906000526020600020905b815481526020019060010190808311610823575b50505050508152505081526020019060010190610717565b5050505081525050905060028081111561086c5761086b612d4f565b5b8160800151600281111561088357610882612d4f565b5b146108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba906138b5565b60405180910390fd5b8060e001518160c001516108d79190613904565b4210610918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090f90613984565b60405180910390fd5b6000821261095b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610952906139f0565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016109b79190613a10565b602060405180830381865afa1580156109d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f89190613a40565b1015610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3090613ab9565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610a9893929190613ad9565b6020604051808303816000875af1158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb9190613b48565b50600060036000888152602001908152602001600020600701905060005b8651811015610bc7576000878281518110610b1757610b16613b75565b5b602002602001015190506000878381518110610b3657610b35613b75565b5b60200260200101519050610b60633b9aca00610b518361174e565b610b5b9190613ba4565b612acc565b633b9aca00610b6e8261174e565b610b789190613ba4565b848381548110610b8b57610b8a613b75565b5b90600052602060002090600302016002016000828254610bab9190613904565b9250508190555050508080610bbf90613be6565b915050610af9565b506000855167ffffffffffffffff811115610be557610be4612e9f565b5b604051908082528060200260200182016040528015610c135781602001602082028036833780820191505090505b50905060005b8651811015610c8657633b9aca00610c4a888381518110610c3d57610c3c613b75565b5b602002602001015161174e565b610c549190613ba4565b828281518110610c6757610c66613b75565b5b6020026020010181815250508080610c7e90613be6565b915050610c19565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001898152602001838152509050600360008a815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610d5f929190612b8e565b506040820151816002019080519060200190610d7c929190612b8e565b5050507f3b1a3edb432322b30fd92acc24fde0b8d6fefa59e4d3ea09c4c60c05511602e3893385604051610db293929190613e14565b60405180910390a15050505050506001600081905550505050565b600260005403610e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0990613823565b60405180910390fd5b60026000819055506000610e2582612856565b90506000610e3385336128a8565b905060006003600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610ec6906137a6565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef2906137a6565b8015610f3f5780601f10610f1457610100808354040283529160200191610f3f565b820191906000526020600020905b815481529060010190602001808311610f2257829003601f168201915b50505050508152602001600382018054610f58906137a6565b80601f0160208091040260200160405190810160405280929190818152602001828054610f84906137a6565b8015610fd15780601f10610fa657610100808354040283529160200191610fd1565b820191906000526020600020905b815481529060010190602001808311610fb457829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115610fff57610ffe612d4f565b5b600281111561101157611010612d4f565b5b81526020016004820160019054906101000a900460ff16600281111561103a57611039612d4f565b5b600281111561104c5761104b612d4f565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156111615783829060005260206000209060030201604051806060016040529081600082015481526020016001820180546110c6906137a6565b80601f01602080910402602001604051908101604052809291908181526020018280546110f2906137a6565b801561113f5780601f106111145761010080835404028352916020019161113f565b820191906000526020600020905b81548152906001019060200180831161112257829003601f168201915b5050505050815260200160028201548152505081526020019060010190611089565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156112c657838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561125657602002820191906000526020600020905b815481526020019060010190808311611242575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156112ae57602002820191906000526020600020905b81548152602001906001019080831161129a575b5050505050815250508152602001906001019061118e565b50505050815250509050600160028111156112e4576112e3612d4f565b5b816080015160028111156112fb576112fa612d4f565b5b1461133b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133290613ec4565b60405180910390fd5b8060e001518160c0015161134f9190613904565b4210611390576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138790613984565b60405180910390fd5b600082126113d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ca906139f0565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161142f9190613a10565b602060405180830381865afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114709190613a40565b10156114b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a890613ab9565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161151093929190613ad9565b6020604051808303816000875af115801561152f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115539190613b48565b50600060036000888152602001908152602001600020600701905060005b865181101561160857600087828151811061158f5761158e613b75565b5b6020026020010151905060008783815181106115ae576115ad613b75565b5b60200260200101519050808483815481106115cc576115cb613b75565b5b906000526020600020906003020160020160008282546115ec9190613904565b925050819055505050808061160090613be6565b915050611571565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781525090506003600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906116e1929190612b8e565b5060408201518160020190805190602001906116fe929190612b8e565b5050507f3b1a3edb432322b30fd92acc24fde0b8d6fefa59e4d3ea09c4c60c05511602e388338460405161173493929190613e14565b60405180910390a150505050506001600081905550505050565b600060038211156117b5578190506000600160028461176d9190613f13565b6117779190613904565b90505b818110156117af5780915060028182856117949190613f13565b61179e9190613904565b6117a89190613f13565b905061177a565b506117c3565b600082146117c257600190505b5b919050565b606060036000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b8282101561193857838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156118c857602002820191906000526020600020905b8154815260200190600101908083116118b4575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561192057602002820191906000526020600020905b81548152602001906001019080831161190c575b50505050508152505081526020019060010190611800565b505050509050919050565b606060036000838152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b82821015611a535783829060005260206000209060030201604051806060016040529081600082015481526020016001820180546119b8906137a6565b80601f01602080910402602001604051908101604052809291908181526020018280546119e4906137a6565b8015611a315780601f10611a0657610100808354040283529160200191611a31565b820191906000526020600020905b815481529060010190602001808311611a1457829003601f168201915b505050505081526020016002820154815250508152602001906001019061197b565b505050509050919050565b600260005403611aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9a90613823565b60405180910390fd5b60026000819055506000611ab784336128a8565b905060006003600086815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054611b4a906137a6565b80601f0160208091040260200160405190810160405280929190818152602001828054611b76906137a6565b8015611bc35780601f10611b9857610100808354040283529160200191611bc3565b820191906000526020600020905b815481529060010190602001808311611ba657829003601f168201915b50505050508152602001600382018054611bdc906137a6565b80601f0160208091040260200160405190810160405280929190818152602001828054611c08906137a6565b8015611c555780601f10611c2a57610100808354040283529160200191611c55565b820191906000526020600020905b815481529060010190602001808311611c3857829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115611c8357611c82612d4f565b5b6002811115611c9557611c94612d4f565b5b81526020016004820160019054906101000a900460ff166002811115611cbe57611cbd612d4f565b5b6002811115611cd057611ccf612d4f565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015611de5578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054611d4a906137a6565b80601f0160208091040260200160405190810160405280929190818152602001828054611d76906137a6565b8015611dc35780601f10611d9857610100808354040283529160200191611dc3565b820191906000526020600020905b815481529060010190602001808311611da657829003601f168201915b5050505050815260200160028201548152505081526020019060010190611d0d565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015611f4a57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015611eda57602002820191906000526020600020905b815481526020019060010190808311611ec6575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611f3257602002820191906000526020600020905b815481526020019060010190808311611f1e575b50505050508152505081526020019060010190611e12565b5050505081525050905060006002811115611f6857611f67612d4f565b5b81608001516002811115611f7f57611f7e612d4f565b5b14611fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb690613fb6565b60405180910390fd5b8060e001518160c00151611fd39190613904565b4210612014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200b90613984565b60405180910390fd5b60008212612057576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204e906139f0565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016120b39190613a10565b602060405180830381865afa1580156120d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f49190613a40565b1015612135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212c90614022565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161219493929190613ad9565b6020604051808303816000875af11580156121b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d79190613b48565b508260036000878152602001908152602001600020600701858154811061220157612200613b75565b5b906000526020600020906003020160020160008282546122219190613904565b925050819055506000600167ffffffffffffffff81111561224557612244612e9f565b5b6040519080825280602002602001820160405280156122735781602001602082028036833780820191505090505b509050848160008151811061228b5761228a613b75565b5b6020026020010181815250506000600167ffffffffffffffff8111156122b4576122b3612e9f565b5b6040519080825280602002602001820160405280156122e25781602001602082028036833780820191505090505b50905084816000815181106122fa576122f9613b75565b5b602002602001018181525050600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381525090506003600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906123de929190612b8e565b5060408201518160020190805190602001906123fb929190612b8e565b50505050505050506001600081905550505050565b600260005403612455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244c90613823565b60405180910390fd5b6002600081905550674563918244f40000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016124c19190613a10565b602060405180830381865afa1580156124de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125029190613a40565b1015612543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253a906140b4565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330674563918244f400006040518463ffffffff1660e01b81526004016125aa93929190614119565b6020604051808303816000875af11580156125c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ed9190613b48565b5060008086036126005760009050612620565b60018603612611576001905061261f565b6002860361261e57600290505b5b5b60008086036126325760009050612652565b600186036126435760019050612651565b6002860361265057600290505b5b5b6002600081548092919061266590613be6565b9190505550600060036000600254815260200190815260200160002090506002548160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550898160020190816126e291906142dd565b50888160030190816126f491906142dd565b50828160040160006101000a81548160ff0219169083600281111561271c5761271b612d4f565b5b0217905550818160040160016101000a81548160ff0219169083600281111561274857612747612d4f565b5b021790555085816005018190555084816006018190555060005b84518110156127f85760008582815181106127805761277f613b75565b5b60200260200101519050826007018190806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010190816127d791906142dd565b506040820151816002015550505080806127f090613be6565b915050612762565b507fdf54b3b6095f0e4bab834f1d5294b7cbcd9cd963191fb841d618e162d9f56fce600254338c8c87878c8c8c60405161283a999897969594939291906143af565b60405180910390a1505050600160008190555050505050505050565b600080600090505b82518110156128a25782818151811061287a57612879613b75565b5b60200260200101518261288d9190613904565b9150808061289a90613be6565b91505061285e565b50919050565b60008060036000858152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b82821015612a1957838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156129a957602002820191906000526020600020905b815481526020019060010190808311612995575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015612a0157602002820191906000526020600020905b8154815260200190600101908083116129ed575b505050505081525050815260200190600101906128e1565b50505050905060005b8151811015612aa0576000828281518110612a4057612a3f613b75565b5b60200260200101516000015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612a8c57819350505050612ac6565b508080612a9890613be6565b915050612a22565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b92915050565b612b6281604051602401612ae0919061306d565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612b65565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b828054828255906000526020600020908101928215612bca579160200282015b82811115612bc9578251825591602001919060010190612bae565b5b509050612bd79190612bdb565b5090565b5b80821115612bf4576000816000905550600101612bdc565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612c1f81612c0c565b8114612c2a57600080fd5b50565b600081359050612c3c81612c16565b92915050565b600060208284031215612c5857612c57612c02565b5b6000612c6684828501612c2d565b91505092915050565b612c7881612c0c565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ca982612c7e565b9050919050565b612cb981612c9e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612cf9578082015181840152602081019050612cde565b60008484015250505050565b6000601f19601f8301169050919050565b6000612d2182612cbf565b612d2b8185612cca565b9350612d3b818560208601612cdb565b612d4481612d05565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612d8f57612d8e612d4f565b5b50565b6000819050612da082612d7e565b919050565b6000612db082612d92565b9050919050565b612dc081612da5565b82525050565b60038110612dd757612dd6612d4f565b5b50565b6000819050612de882612dc6565b919050565b6000612df882612dda565b9050919050565b612e0881612ded565b82525050565b600061010082019050612e24600083018b612c6f565b612e31602083018a612cb0565b8181036040830152612e438189612d16565b90508181036060830152612e578188612d16565b9050612e666080830187612db7565b612e7360a0830186612dff565b612e8060c0830185612c6f565b612e8d60e0830184612c6f565b9998505050505050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612ed782612d05565b810181811067ffffffffffffffff82111715612ef657612ef5612e9f565b5b80604052505050565b6000612f09612bf8565b9050612f158282612ece565b919050565b600067ffffffffffffffff821115612f3557612f34612e9f565b5b602082029050602081019050919050565b600080fd5b6000612f5e612f5984612f1a565b612eff565b90508083825260208201905060208402830185811115612f8157612f80612f46565b5b835b81811015612faa5780612f968882612c2d565b845260208401935050602081019050612f83565b5050509392505050565b600082601f830112612fc957612fc8612e9a565b5b8135612fd9848260208601612f4b565b91505092915050565b600080600060608486031215612ffb57612ffa612c02565b5b600061300986828701612c2d565b935050602084013567ffffffffffffffff81111561302a57613029612c07565b5b61303686828701612fb4565b925050604084013567ffffffffffffffff81111561305757613056612c07565b5b61306386828701612fb4565b9150509250925092565b60006020820190506130826000830184612c6f565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6130bd81612c9e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6130f881612c0c565b82525050565b600061310a83836130ef565b60208301905092915050565b6000602082019050919050565b600061312e826130c3565b61313881856130ce565b9350613143836130df565b8060005b8381101561317457815161315b88826130fe565b975061316683613116565b925050600181019050613147565b5085935050505092915050565b600060608301600083015161319960008601826130b4565b50602083015184820360208601526131b18282613123565b915050604083015184820360408601526131cb8282613123565b9150508091505092915050565b60006131e48383613181565b905092915050565b6000602082019050919050565b600061320482613088565b61320e8185613093565b935083602082028501613220856130a4565b8060005b8581101561325c578484038952815161323d85826131d8565b9450613248836131ec565b925060208a01995050600181019050613224565b50829750879550505050505092915050565b6000602082019050818103600083015261328881846131f9565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006132d882612cbf565b6132e281856132bc565b93506132f2818560208601612cdb565b6132fb81612d05565b840191505092915050565b600060608301600083015161331e60008601826130ef565b506020830151848203602086015261333682826132cd565b915050604083015161334b60408601826130ef565b508091505092915050565b60006133628383613306565b905092915050565b6000602082019050919050565b600061338282613290565b61338c818561329b565b93508360208202850161339e856132ac565b8060005b858110156133da57848403895281516133bb8582613356565b94506133c68361336a565b925060208a019950506001810190506133a2565b50829750879550505050505092915050565b600060208201905081810360008301526134068184613377565b905092915050565b60008060006060848603121561342757613426612c02565b5b600061343586828701612c2d565b935050602061344686828701612c2d565b925050604061345786828701612c2d565b9150509250925092565b600080fd5b600067ffffffffffffffff82111561348157613480612e9f565b5b61348a82612d05565b9050602081019050919050565b82818337600083830152505050565b60006134b96134b484613466565b612eff565b9050828152602081018484840111156134d5576134d4613461565b5b6134e0848285613497565b509392505050565b600082601f8301126134fd576134fc612e9a565b5b813561350d8482602086016134a6565b91505092915050565b600067ffffffffffffffff82111561353157613530612e9f565b5b602082029050602081019050919050565b600080fd5b600080fd5b60006060828403121561356257613561613542565b5b61356c6060612eff565b9050600061357c84828501612c2d565b600083015250602082013567ffffffffffffffff8111156135a05761359f613547565b5b6135ac848285016134e8565b60208301525060406135c084828501612c2d565b60408301525092915050565b60006135df6135da84613516565b612eff565b9050808382526020820190506020840283018581111561360257613601612f46565b5b835b8181101561364957803567ffffffffffffffff81111561362757613626612e9a565b5b808601613634898261354c565b85526020850194505050602081019050613604565b5050509392505050565b600082601f83011261366857613667612e9a565b5b81356136788482602086016135cc565b91505092915050565b600080600080600080600060e0888a0312156136a05761369f612c02565b5b600088013567ffffffffffffffff8111156136be576136bd612c07565b5b6136ca8a828b016134e8565b975050602088013567ffffffffffffffff8111156136eb576136ea612c07565b5b6136f78a828b016134e8565b96505060406137088a828b01612c2d565b95505060606137198a828b01612c2d565b945050608061372a8a828b01612c2d565b93505060a061373b8a828b01612c2d565b92505060c088013567ffffffffffffffff81111561375c5761375b612c07565b5b6137688a828b01613653565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806137be57607f821691505b6020821081036137d1576137d0613777565b5b50919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061380d601f83612cca565b9150613818826137d7565b602082019050919050565b6000602082019050818103600083015261383c81613800565b9050919050565b7f71756164726174696320766f74696e67206e6f7420616c6c6f77656420666f7260008201527f207468652070726f706f73616c00000000000000000000000000000000000000602082015250565b600061389f602d83612cca565b91506138aa82613843565b604082019050919050565b600060208201905081810360008301526138ce81613892565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061390f82612c0c565b915061391a83612c0c565b9250828201905080821115613932576139316138d5565b5b92915050565b7f50726f706f73616c2068617320636c6f73656400000000000000000000000000600082015250565b600061396e601383612cca565b915061397982613938565b602082019050919050565b6000602082019050818103600083015261399d81613961565b9050919050565b7f596f7527766520766f74656420616c7265616479000000000000000000000000600082015250565b60006139da601483612cca565b91506139e5826139a4565b602082019050919050565b60006020820190508181036000830152613a09816139cd565b9050919050565b6000602082019050613a256000830184612cb0565b92915050565b600081519050613a3a81612c16565b92915050565b600060208284031215613a5657613a55612c02565b5b6000613a6484828501613a2b565b91505092915050565b7f496e73756666696369656e7420566f74696e6720506f77657200000000000000600082015250565b6000613aa3601983612cca565b9150613aae82613a6d565b602082019050919050565b60006020820190508181036000830152613ad281613a96565b9050919050565b6000606082019050613aee6000830186612cb0565b613afb6020830185612cb0565b613b086040830184612c6f565b949350505050565b60008115159050919050565b613b2581613b10565b8114613b3057600080fd5b50565b600081519050613b4281613b1c565b92915050565b600060208284031215613b5e57613b5d612c02565b5b6000613b6c84828501613b33565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613baf82612c0c565b9150613bba83612c0c565b9250828202613bc881612c0c565b91508282048414831517613bdf57613bde6138d5565b5b5092915050565b6000613bf182612c0c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c2357613c226138d5565b5b600182019050919050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b6000613c78613c7383613c4e565b613c5b565b9050919050565b60008190508160005260206000209050919050565b60008154613ca1816137a6565b613cab81866132bc565b94506001821660008114613cc65760018114613cdc57613d0f565b60ff198316865281151560200286019350613d0f565b613ce585613c7f565b60005b83811015613d0757815481890152600182019150602081019050613ce8565b808801955050505b50505092915050565b6000606083016000808401549050613d2f81613c65565b613d3c60008701826130ef565b50600184018583036020870152613d538382613c94565b92505060028401549050613d6681613c65565b613d7360408701826130ef565b50819250505092915050565b6000613d8b8383613d18565b905092915050565b6000600382019050919050565b6000613dab82613c2e565b613db5818561329b565b935083602082028501613dc785613c39565b8060005b85811015613e0257848403895281613de38582613d7f565b9450613dee83613d93565b925060208a01995050600181019050613dcb565b50829750879550505050505092915050565b6000606082019050613e296000830186612c6f565b613e366020830185612cb0565b8181036040830152613e488184613da0565b9050949350505050565b7f776569676874656420766f74696e67206e6f7420616c6c6f77656420666f722060008201527f7468652070726f706f73616c0000000000000000000000000000000000000000602082015250565b6000613eae602c83612cca565b9150613eb982613e52565b604082019050919050565b60006020820190508181036000830152613edd81613ea1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613f1e82612c0c565b9150613f2983612c0c565b925082613f3957613f38613ee4565b5b828204905092915050565b7f73696e676c652063686f69636520766f74696e67206e6f7420616c6c6f77656460008201527f20666f72207468652070726f706f73616c000000000000000000000000000000602082015250565b6000613fa0603183612cca565b9150613fab82613f44565b604082019050919050565b60006020820190508181036000830152613fcf81613f93565b9050919050565b7f496e73756666696369656e7420766f74696e6720506f77657200000000000000600082015250565b600061400c601983612cca565b915061401782613fd6565b602082019050919050565b6000602082019050818103600083015261403b81613fff565b9050919050565b7f4d696e696d756d206f662035204c4152206973206e656564656420746f20637260008201527f6561746520612070726f706f73616c0000000000000000000000000000000000602082015250565b600061409e602f83612cca565b91506140a982614042565b604082019050919050565b600060208201905081810360008301526140cd81614091565b9050919050565b6000819050919050565b6000819050919050565b60006141036140fe6140f9846140d4565b6140de565b612c0c565b9050919050565b614113816140e8565b82525050565b600060608201905061412e6000830186612cb0565b61413b6020830185612cb0565b614148604083018461410a565b949350505050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261419d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614160565b6141a78683614160565b95508019841693508086168417925050509392505050565b60006141da6141d56141d084612c0c565b6140de565b612c0c565b9050919050565b6000819050919050565b6141f4836141bf565b614208614200826141e1565b84845461416d565b825550505050565b600090565b61421d614210565b6142288184846141eb565b505050565b5b8181101561424c57614241600082614215565b60018101905061422e565b5050565b601f8211156142915761426281613c7f565b61426b84614150565b8101602085101561427a578190505b61428e61428685614150565b83018261422d565b50505b505050565b600082821c905092915050565b60006142b460001984600802614296565b1980831691505092915050565b60006142cd83836142a3565b9150826002028217905092915050565b6142e682612cbf565b67ffffffffffffffff8111156142ff576142fe612e9f565b5b61430982546137a6565b614314828285614250565b600060209050601f8311600181146143475760008415614335578287015190505b61433f85826142c1565b8655506143a7565b601f19841661435586613c7f565b60005b8281101561437d57848901518255600182019150602085019450602081019050614358565b8683101561439a5784890151614396601f8916826142a3565b8355505b6001600288020188555050505b505050505050565b6000610120820190506143c5600083018c612c6f565b6143d2602083018b612cb0565b81810360408301526143e4818a612d16565b905081810360608301526143f88189612d16565b90506144076080830188612db7565b61441460a0830187612dff565b61442160c0830186612c6f565b61442e60e0830185612c6f565b8181036101008301526144418184613377565b90509a995050505050505050505056fea2646970667358221220c2225887807b4259273553cd17f3e53d574904b1c2019de98038ad69b2cefb4a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806386b646f21161005b57806386b646f21461012c5780638915b3fb1461015c5780639a2341751461018c578063e1665994146101a857610088565b8063013cf08b1461008d5780632d2a1544146100c457806350d2d30a146100e0578063677342ce146100fc575b600080fd5b6100a760048036038101906100a29190612c42565b6101c4565b6040516100bb989796959493929190612e0e565b60405180910390f35b6100de60048036038101906100d99190612fe2565b610356565b005b6100fa60048036038101906100f59190612fe2565b610dcd565b005b61011660048036038101906101119190612c42565b61174e565b604051610123919061306d565b60405180910390f35b61014660048036038101906101419190612c42565b6117c8565b604051610153919061326e565b60405180910390f35b61017660048036038101906101719190612c42565b611943565b60405161018391906133ec565b60405180910390f35b6101a660048036038101906101a1919061340e565b611a5e565b005b6101c260048036038101906101bd9190613681565b612410565b005b60036020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054610213906137a6565b80601f016020809104026020016040519081016040528092919081815260200182805461023f906137a6565b801561028c5780601f106102615761010080835404028352916020019161028c565b820191906000526020600020905b81548152906001019060200180831161026f57829003601f168201915b5050505050908060030180546102a1906137a6565b80601f01602080910402602001604051908101604052809291908181526020018280546102cd906137a6565b801561031a5780601f106102ef5761010080835404028352916020019161031a565b820191906000526020600020905b8154815290600101906020018083116102fd57829003601f168201915b5050505050908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16908060050154908060060154905088565b60026000540361039b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039290613823565b60405180910390fd5b600260008190555060006103ae82612856565b905060006103bc85336128a8565b905060006003600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461044f906137a6565b80601f016020809104026020016040519081016040528092919081815260200182805461047b906137a6565b80156104c85780601f1061049d576101008083540402835291602001916104c8565b820191906000526020600020905b8154815290600101906020018083116104ab57829003601f168201915b505050505081526020016003820180546104e1906137a6565b80601f016020809104026020016040519081016040528092919081815260200182805461050d906137a6565b801561055a5780601f1061052f5761010080835404028352916020019161055a565b820191906000526020600020905b81548152906001019060200180831161053d57829003601f168201915b505050505081526020016004820160009054906101000a900460ff16600281111561058857610587612d4f565b5b600281111561059a57610599612d4f565b5b81526020016004820160019054906101000a900460ff1660028111156105c3576105c2612d4f565b5b60028111156105d5576105d4612d4f565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156106ea57838290600052602060002090600302016040518060600160405290816000820154815260200160018201805461064f906137a6565b80601f016020809104026020016040519081016040528092919081815260200182805461067b906137a6565b80156106c85780601f1061069d576101008083540402835291602001916106c8565b820191906000526020600020905b8154815290600101906020018083116106ab57829003601f168201915b5050505050815260200160028201548152505081526020019060010190610612565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561084f57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156107df57602002820191906000526020600020905b8154815260200190600101908083116107cb575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561083757602002820191906000526020600020905b815481526020019060010190808311610823575b50505050508152505081526020019060010190610717565b5050505081525050905060028081111561086c5761086b612d4f565b5b8160800151600281111561088357610882612d4f565b5b146108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba906138b5565b60405180910390fd5b8060e001518160c001516108d79190613904565b4210610918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090f90613984565b60405180910390fd5b6000821261095b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610952906139f0565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016109b79190613a10565b602060405180830381865afa1580156109d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f89190613a40565b1015610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3090613ab9565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610a9893929190613ad9565b6020604051808303816000875af1158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb9190613b48565b50600060036000888152602001908152602001600020600701905060005b8651811015610bc7576000878281518110610b1757610b16613b75565b5b602002602001015190506000878381518110610b3657610b35613b75565b5b60200260200101519050610b60633b9aca00610b518361174e565b610b5b9190613ba4565b612acc565b633b9aca00610b6e8261174e565b610b789190613ba4565b848381548110610b8b57610b8a613b75565b5b90600052602060002090600302016002016000828254610bab9190613904565b9250508190555050508080610bbf90613be6565b915050610af9565b506000855167ffffffffffffffff811115610be557610be4612e9f565b5b604051908082528060200260200182016040528015610c135781602001602082028036833780820191505090505b50905060005b8651811015610c8657633b9aca00610c4a888381518110610c3d57610c3c613b75565b5b602002602001015161174e565b610c549190613ba4565b828281518110610c6757610c66613b75565b5b6020026020010181815250508080610c7e90613be6565b915050610c19565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001898152602001838152509050600360008a815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610d5f929190612b8e565b506040820151816002019080519060200190610d7c929190612b8e565b5050507f3b1a3edb432322b30fd92acc24fde0b8d6fefa59e4d3ea09c4c60c05511602e3893385604051610db293929190613e14565b60405180910390a15050505050506001600081905550505050565b600260005403610e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0990613823565b60405180910390fd5b60026000819055506000610e2582612856565b90506000610e3385336128a8565b905060006003600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610ec6906137a6565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef2906137a6565b8015610f3f5780601f10610f1457610100808354040283529160200191610f3f565b820191906000526020600020905b815481529060010190602001808311610f2257829003601f168201915b50505050508152602001600382018054610f58906137a6565b80601f0160208091040260200160405190810160405280929190818152602001828054610f84906137a6565b8015610fd15780601f10610fa657610100808354040283529160200191610fd1565b820191906000526020600020905b815481529060010190602001808311610fb457829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115610fff57610ffe612d4f565b5b600281111561101157611010612d4f565b5b81526020016004820160019054906101000a900460ff16600281111561103a57611039612d4f565b5b600281111561104c5761104b612d4f565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156111615783829060005260206000209060030201604051806060016040529081600082015481526020016001820180546110c6906137a6565b80601f01602080910402602001604051908101604052809291908181526020018280546110f2906137a6565b801561113f5780601f106111145761010080835404028352916020019161113f565b820191906000526020600020905b81548152906001019060200180831161112257829003601f168201915b5050505050815260200160028201548152505081526020019060010190611089565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156112c657838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561125657602002820191906000526020600020905b815481526020019060010190808311611242575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156112ae57602002820191906000526020600020905b81548152602001906001019080831161129a575b5050505050815250508152602001906001019061118e565b50505050815250509050600160028111156112e4576112e3612d4f565b5b816080015160028111156112fb576112fa612d4f565b5b1461133b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133290613ec4565b60405180910390fd5b8060e001518160c0015161134f9190613904565b4210611390576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138790613984565b60405180910390fd5b600082126113d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ca906139f0565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161142f9190613a10565b602060405180830381865afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114709190613a40565b10156114b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a890613ab9565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161151093929190613ad9565b6020604051808303816000875af115801561152f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115539190613b48565b50600060036000888152602001908152602001600020600701905060005b865181101561160857600087828151811061158f5761158e613b75565b5b6020026020010151905060008783815181106115ae576115ad613b75565b5b60200260200101519050808483815481106115cc576115cb613b75565b5b906000526020600020906003020160020160008282546115ec9190613904565b925050819055505050808061160090613be6565b915050611571565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781525090506003600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906116e1929190612b8e565b5060408201518160020190805190602001906116fe929190612b8e565b5050507f3b1a3edb432322b30fd92acc24fde0b8d6fefa59e4d3ea09c4c60c05511602e388338460405161173493929190613e14565b60405180910390a150505050506001600081905550505050565b600060038211156117b5578190506000600160028461176d9190613f13565b6117779190613904565b90505b818110156117af5780915060028182856117949190613f13565b61179e9190613904565b6117a89190613f13565b905061177a565b506117c3565b600082146117c257600190505b5b919050565b606060036000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b8282101561193857838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156118c857602002820191906000526020600020905b8154815260200190600101908083116118b4575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561192057602002820191906000526020600020905b81548152602001906001019080831161190c575b50505050508152505081526020019060010190611800565b505050509050919050565b606060036000838152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b82821015611a535783829060005260206000209060030201604051806060016040529081600082015481526020016001820180546119b8906137a6565b80601f01602080910402602001604051908101604052809291908181526020018280546119e4906137a6565b8015611a315780601f10611a0657610100808354040283529160200191611a31565b820191906000526020600020905b815481529060010190602001808311611a1457829003601f168201915b505050505081526020016002820154815250508152602001906001019061197b565b505050509050919050565b600260005403611aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9a90613823565b60405180910390fd5b60026000819055506000611ab784336128a8565b905060006003600086815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054611b4a906137a6565b80601f0160208091040260200160405190810160405280929190818152602001828054611b76906137a6565b8015611bc35780601f10611b9857610100808354040283529160200191611bc3565b820191906000526020600020905b815481529060010190602001808311611ba657829003601f168201915b50505050508152602001600382018054611bdc906137a6565b80601f0160208091040260200160405190810160405280929190818152602001828054611c08906137a6565b8015611c555780601f10611c2a57610100808354040283529160200191611c55565b820191906000526020600020905b815481529060010190602001808311611c3857829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115611c8357611c82612d4f565b5b6002811115611c9557611c94612d4f565b5b81526020016004820160019054906101000a900460ff166002811115611cbe57611cbd612d4f565b5b6002811115611cd057611ccf612d4f565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015611de5578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054611d4a906137a6565b80601f0160208091040260200160405190810160405280929190818152602001828054611d76906137a6565b8015611dc35780601f10611d9857610100808354040283529160200191611dc3565b820191906000526020600020905b815481529060010190602001808311611da657829003601f168201915b5050505050815260200160028201548152505081526020019060010190611d0d565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015611f4a57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015611eda57602002820191906000526020600020905b815481526020019060010190808311611ec6575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611f3257602002820191906000526020600020905b815481526020019060010190808311611f1e575b50505050508152505081526020019060010190611e12565b5050505081525050905060006002811115611f6857611f67612d4f565b5b81608001516002811115611f7f57611f7e612d4f565b5b14611fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb690613fb6565b60405180910390fd5b8060e001518160c00151611fd39190613904565b4210612014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200b90613984565b60405180910390fd5b60008212612057576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204e906139f0565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016120b39190613a10565b602060405180830381865afa1580156120d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f49190613a40565b1015612135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212c90614022565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161219493929190613ad9565b6020604051808303816000875af11580156121b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d79190613b48565b508260036000878152602001908152602001600020600701858154811061220157612200613b75565b5b906000526020600020906003020160020160008282546122219190613904565b925050819055506000600167ffffffffffffffff81111561224557612244612e9f565b5b6040519080825280602002602001820160405280156122735781602001602082028036833780820191505090505b509050848160008151811061228b5761228a613b75565b5b6020026020010181815250506000600167ffffffffffffffff8111156122b4576122b3612e9f565b5b6040519080825280602002602001820160405280156122e25781602001602082028036833780820191505090505b50905084816000815181106122fa576122f9613b75565b5b602002602001018181525050600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381525090506003600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906123de929190612b8e565b5060408201518160020190805190602001906123fb929190612b8e565b50505050505050506001600081905550505050565b600260005403612455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244c90613823565b60405180910390fd5b6002600081905550674563918244f40000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016124c19190613a10565b602060405180830381865afa1580156124de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125029190613a40565b1015612543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253a906140b4565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330674563918244f400006040518463ffffffff1660e01b81526004016125aa93929190614119565b6020604051808303816000875af11580156125c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ed9190613b48565b5060008086036126005760009050612620565b60018603612611576001905061261f565b6002860361261e57600290505b5b5b60008086036126325760009050612652565b600186036126435760019050612651565b6002860361265057600290505b5b5b6002600081548092919061266590613be6565b9190505550600060036000600254815260200190815260200160002090506002548160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550898160020190816126e291906142dd565b50888160030190816126f491906142dd565b50828160040160006101000a81548160ff0219169083600281111561271c5761271b612d4f565b5b0217905550818160040160016101000a81548160ff0219169083600281111561274857612747612d4f565b5b021790555085816005018190555084816006018190555060005b84518110156127f85760008582815181106127805761277f613b75565b5b60200260200101519050826007018190806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010190816127d791906142dd565b506040820151816002015550505080806127f090613be6565b915050612762565b507fdf54b3b6095f0e4bab834f1d5294b7cbcd9cd963191fb841d618e162d9f56fce600254338c8c87878c8c8c60405161283a999897969594939291906143af565b60405180910390a1505050600160008190555050505050505050565b600080600090505b82518110156128a25782818151811061287a57612879613b75565b5b60200260200101518261288d9190613904565b9150808061289a90613be6565b91505061285e565b50919050565b60008060036000858152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b82821015612a1957838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156129a957602002820191906000526020600020905b815481526020019060010190808311612995575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015612a0157602002820191906000526020600020905b8154815260200190600101908083116129ed575b505050505081525050815260200190600101906128e1565b50505050905060005b8151811015612aa0576000828281518110612a4057612a3f613b75565b5b60200260200101516000015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612a8c57819350505050612ac6565b508080612a9890613be6565b915050612a22565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b92915050565b612b6281604051602401612ae0919061306d565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612b65565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b828054828255906000526020600020908101928215612bca579160200282015b82811115612bc9578251825591602001919060010190612bae565b5b509050612bd79190612bdb565b5090565b5b80821115612bf4576000816000905550600101612bdc565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612c1f81612c0c565b8114612c2a57600080fd5b50565b600081359050612c3c81612c16565b92915050565b600060208284031215612c5857612c57612c02565b5b6000612c6684828501612c2d565b91505092915050565b612c7881612c0c565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ca982612c7e565b9050919050565b612cb981612c9e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612cf9578082015181840152602081019050612cde565b60008484015250505050565b6000601f19601f8301169050919050565b6000612d2182612cbf565b612d2b8185612cca565b9350612d3b818560208601612cdb565b612d4481612d05565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612d8f57612d8e612d4f565b5b50565b6000819050612da082612d7e565b919050565b6000612db082612d92565b9050919050565b612dc081612da5565b82525050565b60038110612dd757612dd6612d4f565b5b50565b6000819050612de882612dc6565b919050565b6000612df882612dda565b9050919050565b612e0881612ded565b82525050565b600061010082019050612e24600083018b612c6f565b612e31602083018a612cb0565b8181036040830152612e438189612d16565b90508181036060830152612e578188612d16565b9050612e666080830187612db7565b612e7360a0830186612dff565b612e8060c0830185612c6f565b612e8d60e0830184612c6f565b9998505050505050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612ed782612d05565b810181811067ffffffffffffffff82111715612ef657612ef5612e9f565b5b80604052505050565b6000612f09612bf8565b9050612f158282612ece565b919050565b600067ffffffffffffffff821115612f3557612f34612e9f565b5b602082029050602081019050919050565b600080fd5b6000612f5e612f5984612f1a565b612eff565b90508083825260208201905060208402830185811115612f8157612f80612f46565b5b835b81811015612faa5780612f968882612c2d565b845260208401935050602081019050612f83565b5050509392505050565b600082601f830112612fc957612fc8612e9a565b5b8135612fd9848260208601612f4b565b91505092915050565b600080600060608486031215612ffb57612ffa612c02565b5b600061300986828701612c2d565b935050602084013567ffffffffffffffff81111561302a57613029612c07565b5b61303686828701612fb4565b925050604084013567ffffffffffffffff81111561305757613056612c07565b5b61306386828701612fb4565b9150509250925092565b60006020820190506130826000830184612c6f565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6130bd81612c9e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6130f881612c0c565b82525050565b600061310a83836130ef565b60208301905092915050565b6000602082019050919050565b600061312e826130c3565b61313881856130ce565b9350613143836130df565b8060005b8381101561317457815161315b88826130fe565b975061316683613116565b925050600181019050613147565b5085935050505092915050565b600060608301600083015161319960008601826130b4565b50602083015184820360208601526131b18282613123565b915050604083015184820360408601526131cb8282613123565b9150508091505092915050565b60006131e48383613181565b905092915050565b6000602082019050919050565b600061320482613088565b61320e8185613093565b935083602082028501613220856130a4565b8060005b8581101561325c578484038952815161323d85826131d8565b9450613248836131ec565b925060208a01995050600181019050613224565b50829750879550505050505092915050565b6000602082019050818103600083015261328881846131f9565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006132d882612cbf565b6132e281856132bc565b93506132f2818560208601612cdb565b6132fb81612d05565b840191505092915050565b600060608301600083015161331e60008601826130ef565b506020830151848203602086015261333682826132cd565b915050604083015161334b60408601826130ef565b508091505092915050565b60006133628383613306565b905092915050565b6000602082019050919050565b600061338282613290565b61338c818561329b565b93508360208202850161339e856132ac565b8060005b858110156133da57848403895281516133bb8582613356565b94506133c68361336a565b925060208a019950506001810190506133a2565b50829750879550505050505092915050565b600060208201905081810360008301526134068184613377565b905092915050565b60008060006060848603121561342757613426612c02565b5b600061343586828701612c2d565b935050602061344686828701612c2d565b925050604061345786828701612c2d565b9150509250925092565b600080fd5b600067ffffffffffffffff82111561348157613480612e9f565b5b61348a82612d05565b9050602081019050919050565b82818337600083830152505050565b60006134b96134b484613466565b612eff565b9050828152602081018484840111156134d5576134d4613461565b5b6134e0848285613497565b509392505050565b600082601f8301126134fd576134fc612e9a565b5b813561350d8482602086016134a6565b91505092915050565b600067ffffffffffffffff82111561353157613530612e9f565b5b602082029050602081019050919050565b600080fd5b600080fd5b60006060828403121561356257613561613542565b5b61356c6060612eff565b9050600061357c84828501612c2d565b600083015250602082013567ffffffffffffffff8111156135a05761359f613547565b5b6135ac848285016134e8565b60208301525060406135c084828501612c2d565b60408301525092915050565b60006135df6135da84613516565b612eff565b9050808382526020820190506020840283018581111561360257613601612f46565b5b835b8181101561364957803567ffffffffffffffff81111561362757613626612e9a565b5b808601613634898261354c565b85526020850194505050602081019050613604565b5050509392505050565b600082601f83011261366857613667612e9a565b5b81356136788482602086016135cc565b91505092915050565b600080600080600080600060e0888a0312156136a05761369f612c02565b5b600088013567ffffffffffffffff8111156136be576136bd612c07565b5b6136ca8a828b016134e8565b975050602088013567ffffffffffffffff8111156136eb576136ea612c07565b5b6136f78a828b016134e8565b96505060406137088a828b01612c2d565b95505060606137198a828b01612c2d565b945050608061372a8a828b01612c2d565b93505060a061373b8a828b01612c2d565b92505060c088013567ffffffffffffffff81111561375c5761375b612c07565b5b6137688a828b01613653565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806137be57607f821691505b6020821081036137d1576137d0613777565b5b50919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061380d601f83612cca565b9150613818826137d7565b602082019050919050565b6000602082019050818103600083015261383c81613800565b9050919050565b7f71756164726174696320766f74696e67206e6f7420616c6c6f77656420666f7260008201527f207468652070726f706f73616c00000000000000000000000000000000000000602082015250565b600061389f602d83612cca565b91506138aa82613843565b604082019050919050565b600060208201905081810360008301526138ce81613892565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061390f82612c0c565b915061391a83612c0c565b9250828201905080821115613932576139316138d5565b5b92915050565b7f50726f706f73616c2068617320636c6f73656400000000000000000000000000600082015250565b600061396e601383612cca565b915061397982613938565b602082019050919050565b6000602082019050818103600083015261399d81613961565b9050919050565b7f596f7527766520766f74656420616c7265616479000000000000000000000000600082015250565b60006139da601483612cca565b91506139e5826139a4565b602082019050919050565b60006020820190508181036000830152613a09816139cd565b9050919050565b6000602082019050613a256000830184612cb0565b92915050565b600081519050613a3a81612c16565b92915050565b600060208284031215613a5657613a55612c02565b5b6000613a6484828501613a2b565b91505092915050565b7f496e73756666696369656e7420566f74696e6720506f77657200000000000000600082015250565b6000613aa3601983612cca565b9150613aae82613a6d565b602082019050919050565b60006020820190508181036000830152613ad281613a96565b9050919050565b6000606082019050613aee6000830186612cb0565b613afb6020830185612cb0565b613b086040830184612c6f565b949350505050565b60008115159050919050565b613b2581613b10565b8114613b3057600080fd5b50565b600081519050613b4281613b1c565b92915050565b600060208284031215613b5e57613b5d612c02565b5b6000613b6c84828501613b33565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613baf82612c0c565b9150613bba83612c0c565b9250828202613bc881612c0c565b91508282048414831517613bdf57613bde6138d5565b5b5092915050565b6000613bf182612c0c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c2357613c226138d5565b5b600182019050919050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b6000613c78613c7383613c4e565b613c5b565b9050919050565b60008190508160005260206000209050919050565b60008154613ca1816137a6565b613cab81866132bc565b94506001821660008114613cc65760018114613cdc57613d0f565b60ff198316865281151560200286019350613d0f565b613ce585613c7f565b60005b83811015613d0757815481890152600182019150602081019050613ce8565b808801955050505b50505092915050565b6000606083016000808401549050613d2f81613c65565b613d3c60008701826130ef565b50600184018583036020870152613d538382613c94565b92505060028401549050613d6681613c65565b613d7360408701826130ef565b50819250505092915050565b6000613d8b8383613d18565b905092915050565b6000600382019050919050565b6000613dab82613c2e565b613db5818561329b565b935083602082028501613dc785613c39565b8060005b85811015613e0257848403895281613de38582613d7f565b9450613dee83613d93565b925060208a01995050600181019050613dcb565b50829750879550505050505092915050565b6000606082019050613e296000830186612c6f565b613e366020830185612cb0565b8181036040830152613e488184613da0565b9050949350505050565b7f776569676874656420766f74696e67206e6f7420616c6c6f77656420666f722060008201527f7468652070726f706f73616c0000000000000000000000000000000000000000602082015250565b6000613eae602c83612cca565b9150613eb982613e52565b604082019050919050565b60006020820190508181036000830152613edd81613ea1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613f1e82612c0c565b9150613f2983612c0c565b925082613f3957613f38613ee4565b5b828204905092915050565b7f73696e676c652063686f69636520766f74696e67206e6f7420616c6c6f77656460008201527f20666f72207468652070726f706f73616c000000000000000000000000000000602082015250565b6000613fa0603183612cca565b9150613fab82613f44565b604082019050919050565b60006020820190508181036000830152613fcf81613f93565b9050919050565b7f496e73756666696369656e7420766f74696e6720506f77657200000000000000600082015250565b600061400c601983612cca565b915061401782613fd6565b602082019050919050565b6000602082019050818103600083015261403b81613fff565b9050919050565b7f4d696e696d756d206f662035204c4152206973206e656564656420746f20637260008201527f6561746520612070726f706f73616c0000000000000000000000000000000000602082015250565b600061409e602f83612cca565b91506140a982614042565b604082019050919050565b600060208201905081810360008301526140cd81614091565b9050919050565b6000819050919050565b6000819050919050565b60006141036140fe6140f9846140d4565b6140de565b612c0c565b9050919050565b614113816140e8565b82525050565b600060608201905061412e6000830186612cb0565b61413b6020830185612cb0565b614148604083018461410a565b949350505050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261419d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614160565b6141a78683614160565b95508019841693508086168417925050509392505050565b60006141da6141d56141d084612c0c565b6140de565b612c0c565b9050919050565b6000819050919050565b6141f4836141bf565b614208614200826141e1565b84845461416d565b825550505050565b600090565b61421d614210565b6142288184846141eb565b505050565b5b8181101561424c57614241600082614215565b60018101905061422e565b5050565b601f8211156142915761426281613c7f565b61426b84614150565b8101602085101561427a578190505b61428e61428685614150565b83018261422d565b50505b505050565b600082821c905092915050565b60006142b460001984600802614296565b1980831691505092915050565b60006142cd83836142a3565b9150826002028217905092915050565b6142e682612cbf565b67ffffffffffffffff8111156142ff576142fe612e9f565b5b61430982546137a6565b614314828285614250565b600060209050601f8311600181146143475760008415614335578287015190505b61433f85826142c1565b8655506143a7565b601f19841661435586613c7f565b60005b8281101561437d57848901518255600182019150602085019450602081019050614358565b8683101561439a5784890151614396601f8916826142a3565b8355505b6001600288020188555050505b505050505050565b6000610120820190506143c5600083018c612c6f565b6143d2602083018b612cb0565b81810360408301526143e4818a612d16565b905081810360608301526143f88189612d16565b90506144076080830188612db7565b61441460a0830187612dff565b61442160c0830186612c6f565b61442e60e0830185612c6f565b8181036101008301526144418184613377565b90509a995050505050505050505056fea2646970667358221220c2225887807b4259273553cd17f3e53d574904b1c2019de98038ad69b2cefb4a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Dao.sol:Dao",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 127,
        "contract": "contracts/Dao.sol:Dao",
        "label": "larToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)117"
      },
      {
        "astId": 129,
        "contract": "contracts/Dao.sol:Dao",
        "label": "proposalId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 219,
        "contract": "contracts/Dao.sol:Dao",
        "label": "proposals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Proposal)180_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Option)144_storage)dyn_storage": {
        "base": "t_struct(Option)144_storage",
        "encoding": "dynamic_array",
        "label": "struct Dao.Option[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Voter)153_storage)dyn_storage": {
        "base": "t_struct(Voter)153_storage",
        "encoding": "dynamic_array",
        "label": "struct Dao.Voter[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)117": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ProposalStatus)137": {
        "encoding": "inplace",
        "label": "enum Dao.ProposalStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ProposalType)133": {
        "encoding": "inplace",
        "label": "enum Dao.ProposalType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Proposal)180_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Dao.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)180_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Option)144_storage": {
        "encoding": "inplace",
        "label": "struct Dao.Option",
        "members": [
          {
            "astId": 139,
            "contract": "contracts/Dao.sol:Dao",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 141,
            "contract": "contracts/Dao.sol:Dao",
            "label": "optionText",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 143,
            "contract": "contracts/Dao.sol:Dao",
            "label": "vote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Proposal)180_storage": {
        "encoding": "inplace",
        "label": "struct Dao.Proposal",
        "members": [
          {
            "astId": 155,
            "contract": "contracts/Dao.sol:Dao",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 157,
            "contract": "contracts/Dao.sol:Dao",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 159,
            "contract": "contracts/Dao.sol:Dao",
            "label": "title",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 161,
            "contract": "contracts/Dao.sol:Dao",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 164,
            "contract": "contracts/Dao.sol:Dao",
            "label": "proposalType",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(ProposalType)133"
          },
          {
            "astId": 167,
            "contract": "contracts/Dao.sol:Dao",
            "label": "proposalStatus",
            "offset": 1,
            "slot": "4",
            "type": "t_enum(ProposalStatus)137"
          },
          {
            "astId": 169,
            "contract": "contracts/Dao.sol:Dao",
            "label": "startDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 171,
            "contract": "contracts/Dao.sol:Dao",
            "label": "duration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 175,
            "contract": "contracts/Dao.sol:Dao",
            "label": "options",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Option)144_storage)dyn_storage"
          },
          {
            "astId": 179,
            "contract": "contracts/Dao.sol:Dao",
            "label": "voters",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Voter)153_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Voter)153_storage": {
        "encoding": "inplace",
        "label": "struct Dao.Voter",
        "members": [
          {
            "astId": 146,
            "contract": "contracts/Dao.sol:Dao",
            "label": "voterAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 149,
            "contract": "contracts/Dao.sol:Dao",
            "label": "optionIndexes",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 152,
            "contract": "contracts/Dao.sol:Dao",
            "label": "optionVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}