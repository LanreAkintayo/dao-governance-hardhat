{
  "address": "0x1727B6a550cEaea845727b275f7491C78419A34E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "larTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum Dao.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum Dao.ProposalStatus",
          "name": "proposalStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Dao.Option[]",
          "name": "options",
          "type": "tuple[]"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "Testing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "voterAddress",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "optionIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "optionVotes",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Dao.Voter",
          "name": "voter",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Dao.Option[]",
          "name": "options",
          "type": "tuple[]"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "optionVotes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "optionIndexes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Dao.Option[]",
          "name": "proposalOptions",
          "type": "tuple[]"
        }
      ],
      "name": "VoteCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "checkVotingStatus",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_proposalType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_proposalStatus",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "internalType": "struct Dao.Option[]",
          "name": "_options",
          "type": "tuple[]"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getOptions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "optionText",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            }
          ],
          "internalType": "struct Dao.Option[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getVoters",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "voterAddress",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "optionIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "optionVotes",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Dao.Voter[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "enum Dao.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        },
        {
          "internalType": "enum Dao.ProposalStatus",
          "name": "proposalStatus",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "sendLAR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "sqrt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "z",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votingPower",
          "type": "uint256[]"
        }
      ],
      "name": "voteProposalByQuadratic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "voteProposalBySingleChoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votingPower",
          "type": "uint256[]"
        }
      ],
      "name": "voteProposalByWeighing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x032d9ba63d1d8ebd94eacd285bb9b2080e975a3d583b7dcf6f466139f1ac2b5b",
  "receipt": {
    "to": null,
    "from": "0xDD4c43c13e6F1b2374Ed9AAabBA7D56Bb4a68A03",
    "contractAddress": "0x1727B6a550cEaea845727b275f7491C78419A34E",
    "transactionIndex": 34,
    "gasUsed": "4213430",
    "logsBloom": "0x00000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000a00000000000000000000100000000000000000000040000000200000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000020000000000000000001000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x004eb689173aee7fb69754e5b62f2c685d701dddaf1569302a113f7d1015af68",
    "transactionHash": "0x032d9ba63d1d8ebd94eacd285bb9b2080e975a3d583b7dcf6f466139f1ac2b5b",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 28295288,
        "transactionHash": "0x032d9ba63d1d8ebd94eacd285bb9b2080e975a3d583b7dcf6f466139f1ac2b5b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000dd4c43c13e6f1b2374ed9aaabba7d56bb4a68a03",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000cacd8229ffda5e000000000000000000000000000000000000000000000000025eeb5acceefbbe0000000000000000000000000000000000000000000015a8950d4da1ba74ceec00000000000000000000000000000000000000000000000001941dd8a2ef21600000000000000000000000000000000000000000000015a895d81b23e474a94a",
        "logIndex": 234,
        "blockHash": "0x004eb689173aee7fb69754e5b62f2c685d701dddaf1569302a113f7d1015af68"
      }
    ],
    "blockNumber": 28295288,
    "cumulativeGasUsed": "12337992",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7AB3bE7df12321Ab0f54FbbB5CECCC4a66ae2030"
  ],
  "numDeployments": 6,
  "solcInputHash": "bafa4299d574ce8e306f7bc2d8e47d4b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"larTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum Dao.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum Dao.ProposalStatus\",\"name\":\"proposalStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Dao.Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Testing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Dao.Voter\",\"name\":\"voter\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Dao.Option[]\",\"name\":\"options\",\"type\":\"tuple[]\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Dao.Option[]\",\"name\":\"proposalOptions\",\"type\":\"tuple[]\"}],\"name\":\"VoteCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"checkVotingStatus\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_proposalType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposalStatus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"struct Dao.Option[]\",\"name\":\"_options\",\"type\":\"tuple[]\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"optionText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"struct Dao.Option[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getVoters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionVotes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Dao.Voter[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum Dao.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"enum Dao.ProposalStatus\",\"name\":\"proposalStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendLAR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votingPower\",\"type\":\"uint256[]\"}],\"name\":\"voteProposalByQuadratic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"voteProposalBySingleChoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votingPower\",\"type\":\"uint256[]\"}],\"name\":\"voteProposalByWeighing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dao.sol\":\"Dao\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Dao.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/*\\r\\ncreateQuadraticProposal()\\r\\ncreateWeightedProposal()\\r\\ncreateSingleChoiceProposal()\\r\\nvoteByQuadratic()\\r\\nvoteBySingleChoice()\\r\\nvoteByWeighted()\\r\\n\\r\\n */\\r\\ncontract Dao is ReentrancyGuard {\\r\\n    IERC20 larToken;\\r\\n    uint256 proposalId;\\r\\n\\r\\n    enum ProposalType {\\r\\n        SingleChoice,\\r\\n        Weighted,\\r\\n        Quadratic\\r\\n    }\\r\\n\\r\\n    enum ProposalStatus {\\r\\n        Pending,\\r\\n        Active,\\r\\n        Closed\\r\\n    }\\r\\n\\r\\n    struct Option {\\r\\n        uint256 index;\\r\\n        string optionText;\\r\\n        uint256 vote;\\r\\n    }\\r\\n\\r\\n    struct Voter {\\r\\n        address voterAddress;\\r\\n        uint[] optionIndexes;\\r\\n        uint[] optionVotes;\\r\\n    }\\r\\n\\r\\n\\r\\n    struct Proposal {\\r\\n        uint256 id;\\r\\n        address creator;\\r\\n        string title;\\r\\n        string description;\\r\\n        ProposalType proposalType;\\r\\n        ProposalStatus proposalStatus;\\r\\n        uint256 startDate;\\r\\n        uint256 duration;\\r\\n        Option[] options;\\r\\n        Voter[] voters;\\r\\n    }\\r\\n\\r\\n    event ProposalCreated(\\r\\n        uint256 id,\\r\\n        address creator,\\r\\n        string title,\\r\\n        string description,\\r\\n        ProposalType proposalType,\\r\\n        ProposalStatus proposalStatus,\\r\\n        uint256 startDate,\\r\\n        uint256 duration,\\r\\n        Option[] options\\r\\n    );\\r\\n\\r\\n\\r\\n    event VoteCreated(uint id, uint[] optionVotes, uint[] optionIndexes, address voterAddress, Option[] proposalOptions);\\r\\n\\r\\n    event Vote(uint256 id, Voter voter, Option[] options);\\r\\n    event Testing(uint256 id, address voter);\\r\\n\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n\\r\\n    constructor(address larTokenAddress) {\\r\\n        larToken = IERC20(larTokenAddress);\\r\\n    }\\r\\n\\r\\n    function createProposal(\\r\\n        string memory _title,\\r\\n        string memory _description,\\r\\n        uint256 _proposalType,\\r\\n        uint256 _proposalStatus,\\r\\n        uint256 _startDate,\\r\\n        uint256 _duration,\\r\\n        Option[] memory _options\\r\\n    ) external nonReentrant {\\r\\n        require(\\r\\n            larToken.balanceOf(msg.sender) >= 5e18,\\r\\n            \\\"Minimum of 5 LAR is needed to create a proposal\\\"\\r\\n        );\\r\\n\\r\\n        larToken.transferFrom(msg.sender, address(this), 5e18);\\r\\n\\r\\n        ProposalType proposalType;\\r\\n        if (_proposalType == 0) {\\r\\n            proposalType = ProposalType.SingleChoice;\\r\\n        } else if (_proposalType == 1) {\\r\\n            proposalType = ProposalType.Weighted;\\r\\n        } else if (_proposalType == 2) {\\r\\n            proposalType = ProposalType.Quadratic;\\r\\n        }\\r\\n\\r\\n        ProposalStatus proposalStatus;\\r\\n        if (_proposalStatus == 0) {\\r\\n            proposalStatus = ProposalStatus.Pending;\\r\\n        } else if (_proposalStatus == 1) {\\r\\n            proposalStatus = ProposalStatus.Active;\\r\\n        } else if (_proposalStatus == 2) {\\r\\n            proposalStatus = ProposalStatus.Closed;\\r\\n        }\\r\\n\\r\\n        proposalId++;\\r\\n\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        proposal.id = proposalId;\\r\\n        proposal.creator = msg.sender;\\r\\n        proposal.title = _title;\\r\\n        proposal.description = _description;\\r\\n        proposal.proposalType = proposalType;\\r\\n        proposal.proposalStatus = proposalStatus;\\r\\n        proposal.startDate = _startDate;\\r\\n        proposal.duration = _duration;\\r\\n\\r\\n\\r\\n        for (uint256 i = 0; i < _options.length; i++) {\\r\\n            Option memory currentOption = _options[i];\\r\\n            // console.log(\\\"This is the current option: \\\", currentOption.optionText);\\r\\n            proposal.options.push(currentOption);\\r\\n        }\\r\\n\\r\\n        emit ProposalCreated(\\r\\n            proposalId,\\r\\n            msg.sender,\\r\\n            _title,\\r\\n            _description,\\r\\n            proposalType,\\r\\n            proposalStatus,\\r\\n            _startDate,\\r\\n            _duration,\\r\\n            _options\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getOptions(uint256 id) external view returns (Option[] memory) {\\r\\n        return proposals[id].options;\\r\\n    }\\r\\n\\r\\n    function getVoters(uint256 id) external view returns (Voter[] memory) {\\r\\n        return proposals[id].voters;\\r\\n    }\\r\\n\\r\\n    function sendLAR(address receiver) external {\\r\\n        larToken.transfer(receiver, 50e18);\\r\\n    }\\r\\n\\r\\n    function voteProposalByQuadratic(\\r\\n        uint256 id,\\r\\n        uint256[] memory indexes,\\r\\n        uint256[] memory votingPower\\r\\n    ) external nonReentrant {\\r\\n        uint256 totalVotingPower = getTotalVotingPower(votingPower);\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = proposals[id];\\r\\n\\r\\n        require(proposal.proposalType == ProposalType.Quadratic, \\\"quadratic voting not allowed for the proposal\\\");\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal has closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"You've voted already\\\");\\r\\n        require(\\r\\n            larToken.balanceOf(msg.sender) >= totalVotingPower,\\r\\n            \\\"Insufficient Voting Power\\\"\\r\\n        );\\r\\n        larToken.transferFrom(msg.sender, address(this), totalVotingPower);\\r\\n\\r\\n        Option[] storage options = proposals[id].options;\\r\\n\\r\\n        for (uint256 i = 0; i < indexes.length; i++) {\\r\\n            uint256 currentOptionIndex = indexes[i];\\r\\n            uint256 currentOptionVotingPower = votingPower[i];\\r\\n            console.log(sqrt(currentOptionVotingPower) * (10**9));\\r\\n            options[currentOptionIndex].vote += sqrt(currentOptionVotingPower) * (10**9);\\r\\n        }\\r\\n\\r\\n        uint[] memory optionVotes = new uint[](votingPower.length);\\r\\n        for (uint i = 0; i < votingPower.length; i++){\\r\\n            optionVotes[i] = sqrt(votingPower[i]) * (10**9);\\r\\n        }\\r\\n\\r\\n        Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: indexes,\\r\\n            optionVotes: optionVotes\\r\\n        });\\r\\n\\r\\n        proposals[id].voters.push(voter);\\r\\n\\r\\n        emit Vote(id, voter, options);\\r\\n        emit VoteCreated(id, optionVotes, indexes, msg.sender, proposals[id].options);\\r\\n\\r\\n    }\\r\\n\\r\\n    function voteProposalBySingleChoice(\\r\\n        uint256 id,\\r\\n        uint256 index,\\r\\n        uint256 votingPower\\r\\n    ) external nonReentrant {\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = proposals[id];\\r\\n\\r\\n        require(proposal.proposalType == ProposalType.SingleChoice, \\\"single choice voting not allowed for the proposal\\\");\\r\\n\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal has closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"You've voted already\\\");\\r\\n        require(\\r\\n            larToken.balanceOf(msg.sender) >= votingPower,\\r\\n            \\\"Insufficient voting Power\\\"\\r\\n        );\\r\\n\\r\\n        larToken.transferFrom(msg.sender, address(this), votingPower);\\r\\n\\r\\n        proposals[id].options[index].vote += votingPower;\\r\\n        \\r\\n        uint[] memory optionIndex = new uint[](1);\\r\\n        optionIndex[0] = index;\\r\\n\\r\\n        uint[] memory optionVotes = new uint[](1);\\r\\n        optionVotes[0] = votingPower;\\r\\n\\r\\n         Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: optionIndex,\\r\\n            optionVotes: optionVotes\\r\\n        });\\r\\n\\r\\n        proposals[id].voters.push(voter);\\r\\n\\r\\n        emit Vote(id, voter, proposals[id].options);\\r\\n        emit Testing(id, msg.sender);\\r\\n        emit VoteCreated(id, optionVotes, optionIndex, msg.sender, proposals[id].options);\\r\\n        // proposals[id].voters.push(msg.sender);\\r\\n    }\\r\\n\\r\\n    function voteProposalByWeighing(\\r\\n        uint256 id,\\r\\n        uint256[] memory indexes,\\r\\n        uint256[] memory votingPower\\r\\n    ) external nonReentrant {\\r\\n        uint256 totalVotingPower = getTotalVotingPower(votingPower);\\r\\n        int256 hasVoted = checkVotingStatus(id, msg.sender);\\r\\n        Proposal memory proposal = proposals[id];\\r\\n\\r\\n        require(proposal.proposalType == ProposalType.Weighted, \\\"weighted voting not allowed for the proposal\\\");\\r\\n\\r\\n        require(\\r\\n            block.timestamp < proposal.startDate + proposal.duration,\\r\\n            \\\"Proposal has closed\\\"\\r\\n        );\\r\\n        require(hasVoted < 0, \\\"You've voted already\\\");\\r\\n        require(\\r\\n            larToken.balanceOf(msg.sender) >= totalVotingPower,\\r\\n            \\\"Insufficient Voting Power\\\"\\r\\n        );\\r\\n        larToken.transferFrom(msg.sender, address(this), totalVotingPower);\\r\\n\\r\\n        Option[] storage options = proposals[id].options;\\r\\n\\r\\n        for (uint256 i = 0; i < indexes.length; i++) {\\r\\n            uint256 currentOptionIndex = indexes[i];\\r\\n            uint256 currentOptionVotingPower = votingPower[i];\\r\\n            options[currentOptionIndex].vote += currentOptionVotingPower;\\r\\n        }\\r\\n\\r\\n        // Voter[] voters = proposal.voters\\r\\n        Voter memory voter = Voter({\\r\\n            voterAddress: msg.sender,\\r\\n            optionIndexes: indexes,\\r\\n            optionVotes: votingPower\\r\\n        });\\r\\n\\r\\n        proposals[id].voters.push(voter);\\r\\n        \\r\\n\\r\\n        emit Vote(id, voter, options);\\r\\n        emit VoteCreated(id, votingPower, indexes, msg.sender, proposals[id].options); \\r\\n\\r\\n    }\\r\\n\\r\\n    function getTotalVotingPower(uint256[] memory votingPower)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 totalVotingPower)\\r\\n    {\\r\\n        for (uint256 i = 0; i < votingPower.length; i++) {\\r\\n            totalVotingPower += votingPower[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkVotingStatus(uint256 id, address voter)\\r\\n        public\\r\\n        view\\r\\n        returns (int256)\\r\\n    {\\r\\n        Voter[] memory voters = proposals[id].voters;\\r\\n        for (uint256 i = 0; i < voters.length; i++) {\\r\\n            address currentVoter = voters[i].voterAddress;\\r\\n            if (voter == currentVoter) {\\r\\n                return int256(i);\\r\\n            }\\r\\n        }\\r\\n        return -1;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 y) public pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\",\"keccak256\":\"0x115d5ec0ed69702027c1f05b4c771749a86ddd58b00056aa6c8943dd3b6a37a8\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004bc338038062004bc38339818101604052810190620000379190620000f1565b600160008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000123565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b9826200008c565b9050919050565b620000cb81620000ac565b8114620000d757600080fd5b50565b600081519050620000eb81620000c0565b92915050565b6000602082840312156200010a576200010962000087565b5b60006200011a84828501620000da565b91505092915050565b614a9080620001336000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638915b3fb116100665780638915b3fb146101725780639a234175146101a2578063c36954ba146101be578063da12935c146101da578063e16659941461020a5761009e565b8063013cf08b146100a35780632d2a1544146100da57806350d2d30a146100f6578063677342ce1461011257806386b646f214610142575b600080fd5b6100bd60048036038101906100b89190612ed6565b610226565b6040516100d19897969594939291906130a2565b60405180910390f35b6100f460048036038101906100ef9190613276565b6103b8565b005b610110600480360381019061010b9190613276565b610e83565b005b61012c60048036038101906101279190612ed6565b611858565b6040516101399190613301565b60405180910390f35b61015c60048036038101906101579190612ed6565b6118d2565b6040516101699190613502565b60405180910390f35b61018c60048036038101906101879190612ed6565b611a4d565b6040516101999190613680565b60405180910390f35b6101bc60048036038101906101b791906136a2565b611b68565b005b6101d860048036038101906101d39190613721565b6125f7565b005b6101f460048036038101906101ef919061374e565b6126a4565b60405161020191906137a7565b60405180910390f35b610224600480360381019061021f91906139e2565b6128c8565b005b60036020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201805461027590613b07565b80601f01602080910402602001604051908101604052809291908181526020018280546102a190613b07565b80156102ee5780601f106102c3576101008083540402835291602001916102ee565b820191906000526020600020905b8154815290600101906020018083116102d157829003601f168201915b50505050509080600301805461030390613b07565b80601f016020809104026020016040519081016040528092919081815260200182805461032f90613b07565b801561037c5780601f106103515761010080835404028352916020019161037c565b820191906000526020600020905b81548152906001019060200180831161035f57829003601f168201915b5050505050908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16908060050154908060060154905088565b6002600054036103fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f490613b84565b60405180910390fd5b6002600081905550600061041082612d0e565b9050600061041e85336126a4565b905060006003600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546104b190613b07565b80601f01602080910402602001604051908101604052809291908181526020018280546104dd90613b07565b801561052a5780601f106104ff5761010080835404028352916020019161052a565b820191906000526020600020905b81548152906001019060200180831161050d57829003601f168201915b5050505050815260200160038201805461054390613b07565b80601f016020809104026020016040519081016040528092919081815260200182805461056f90613b07565b80156105bc5780601f10610591576101008083540402835291602001916105bc565b820191906000526020600020905b81548152906001019060200180831161059f57829003601f168201915b505050505081526020016004820160009054906101000a900460ff1660028111156105ea576105e9612fe3565b5b60028111156105fc576105fb612fe3565b5b81526020016004820160019054906101000a900460ff16600281111561062557610624612fe3565b5b600281111561063757610636612fe3565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561074c5783829060005260206000209060030201604051806060016040529081600082015481526020016001820180546106b190613b07565b80601f01602080910402602001604051908101604052809291908181526020018280546106dd90613b07565b801561072a5780601f106106ff5761010080835404028352916020019161072a565b820191906000526020600020905b81548152906001019060200180831161070d57829003601f168201915b5050505050815260200160028201548152505081526020019060010190610674565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156108b157838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561084157602002820191906000526020600020905b81548152602001906001019080831161082d575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561089957602002820191906000526020600020905b815481526020019060010190808311610885575b50505050508152505081526020019060010190610779565b505050508152505090506002808111156108ce576108cd612fe3565b5b816080015160028111156108e5576108e4612fe3565b5b14610925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091c90613c16565b60405180910390fd5b8060e001518160c001516109399190613c65565b421061097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190613ce5565b60405180910390fd5b600082126109bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b490613d51565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610a199190613d71565b602060405180830381865afa158015610a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5a9190613da1565b1015610a9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9290613e1a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610afa93929190613e3a565b6020604051808303816000875af1158015610b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3d9190613ea9565b50600060036000888152602001908152602001600020600701905060005b8651811015610c29576000878281518110610b7957610b78613ed6565b5b602002602001015190506000878381518110610b9857610b97613ed6565b5b60200260200101519050610bc2633b9aca00610bb383611858565b610bbd9190613f05565b612d60565b633b9aca00610bd082611858565b610bda9190613f05565b848381548110610bed57610bec613ed6565b5b90600052602060002090600302016002016000828254610c0d9190613c65565b9250508190555050508080610c2190613f47565b915050610b5b565b506000855167ffffffffffffffff811115610c4757610c46613133565b5b604051908082528060200260200182016040528015610c755781602001602082028036833780820191505090505b50905060005b8651811015610ce857633b9aca00610cac888381518110610c9f57610c9e613ed6565b5b6020026020010151611858565b610cb69190613f05565b828281518110610cc957610cc8613ed6565b5b6020026020010181815250508080610ce090613f47565b915050610c7b565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001898152602001838152509050600360008a815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610dc1929190612e22565b506040820151816002019080519060200190610dde929190612e22565b5050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e92898285604051610e14939291906141cc565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489838a33600360008f8152602001908152602001600020600701604051610e68959493929190614321565b60405180910390a15050505050506001600081905550505050565b600260005403610ec8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebf90613b84565b60405180910390fd5b60026000819055506000610edb82612d0e565b90506000610ee985336126a4565b905060006003600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610f7c90613b07565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa890613b07565b8015610ff55780601f10610fca57610100808354040283529160200191610ff5565b820191906000526020600020905b815481529060010190602001808311610fd857829003601f168201915b5050505050815260200160038201805461100e90613b07565b80601f016020809104026020016040519081016040528092919081815260200182805461103a90613b07565b80156110875780601f1061105c57610100808354040283529160200191611087565b820191906000526020600020905b81548152906001019060200180831161106a57829003601f168201915b505050505081526020016004820160009054906101000a900460ff1660028111156110b5576110b4612fe3565b5b60028111156110c7576110c6612fe3565b5b81526020016004820160019054906101000a900460ff1660028111156110f0576110ef612fe3565b5b600281111561110257611101612fe3565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561121757838290600052602060002090600302016040518060600160405290816000820154815260200160018201805461117c90613b07565b80601f01602080910402602001604051908101604052809291908181526020018280546111a890613b07565b80156111f55780601f106111ca576101008083540402835291602001916111f5565b820191906000526020600020905b8154815290600101906020018083116111d857829003601f168201915b505050505081526020016002820154815250508152602001906001019061113f565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561137c57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561130c57602002820191906000526020600020905b8154815260200190600101908083116112f8575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561136457602002820191906000526020600020905b815481526020019060010190808311611350575b50505050508152505081526020019060010190611244565b505050508152505090506001600281111561139a57611399612fe3565b5b816080015160028111156113b1576113b0612fe3565b5b146113f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e8906143fb565b60405180910390fd5b8060e001518160c001516114059190613c65565b4210611446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143d90613ce5565b60405180910390fd5b60008212611489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148090613d51565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016114e59190613d71565b602060405180830381865afa158015611502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115269190613da1565b1015611567576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155e90613e1a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016115c693929190613e3a565b6020604051808303816000875af11580156115e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116099190613ea9565b50600060036000888152602001908152602001600020600701905060005b86518110156116be57600087828151811061164557611644613ed6565b5b60200260200101519050600087838151811061166457611663613ed6565b5b602002602001015190508084838154811061168257611681613ed6565b5b906000526020600020906003020160020160008282546116a29190613c65565b92505081905550505080806116b690613f47565b915050611627565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781525090506003600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190611797929190612e22565b5060408201518160020190805190602001906117b4929190612e22565b5050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928882846040516117ea939291906141cc565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266488878933600360008e815260200190815260200160002060070160405161183e959493929190614321565b60405180910390a150505050506001600081905550505050565b600060038211156118bf5781905060006001600284611877919061444a565b6118819190613c65565b90505b818110156118b957809150600281828561189e919061444a565b6118a89190613c65565b6118b2919061444a565b9050611884565b506118cd565b600082146118cc57600190505b5b919050565b606060036000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b82821015611a4257838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156119d257602002820191906000526020600020905b8154815260200190600101908083116119be575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611a2a57602002820191906000526020600020905b815481526020019060010190808311611a16575b5050505050815250508152602001906001019061190a565b505050509050919050565b606060036000838152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b82821015611b5d578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054611ac290613b07565b80601f0160208091040260200160405190810160405280929190818152602001828054611aee90613b07565b8015611b3b5780601f10611b1057610100808354040283529160200191611b3b565b820191906000526020600020905b815481529060010190602001808311611b1e57829003601f168201915b5050505050815260200160028201548152505081526020019060010190611a85565b505050509050919050565b600260005403611bad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba490613b84565b60405180910390fd5b60026000819055506000611bc184336126a4565b905060006003600086815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054611c5490613b07565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8090613b07565b8015611ccd5780601f10611ca257610100808354040283529160200191611ccd565b820191906000526020600020905b815481529060010190602001808311611cb057829003601f168201915b50505050508152602001600382018054611ce690613b07565b80601f0160208091040260200160405190810160405280929190818152602001828054611d1290613b07565b8015611d5f5780601f10611d3457610100808354040283529160200191611d5f565b820191906000526020600020905b815481529060010190602001808311611d4257829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115611d8d57611d8c612fe3565b5b6002811115611d9f57611d9e612fe3565b5b81526020016004820160019054906101000a900460ff166002811115611dc857611dc7612fe3565b5b6002811115611dda57611dd9612fe3565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015611eef578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054611e5490613b07565b80601f0160208091040260200160405190810160405280929190818152602001828054611e8090613b07565b8015611ecd5780601f10611ea257610100808354040283529160200191611ecd565b820191906000526020600020905b815481529060010190602001808311611eb057829003601f168201915b5050505050815260200160028201548152505081526020019060010190611e17565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561205457838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015611fe457602002820191906000526020600020905b815481526020019060010190808311611fd0575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561203c57602002820191906000526020600020905b815481526020019060010190808311612028575b50505050508152505081526020019060010190611f1c565b505050508152505090506000600281111561207257612071612fe3565b5b8160800151600281111561208957612088612fe3565b5b146120c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c0906144ed565b60405180910390fd5b8060e001518160c001516120dd9190613c65565b421061211e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211590613ce5565b60405180910390fd5b60008212612161576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215890613d51565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016121bd9190613d71565b602060405180830381865afa1580156121da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fe9190613da1565b101561223f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223690614559565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161229e93929190613e3a565b6020604051808303816000875af11580156122bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e19190613ea9565b508260036000878152602001908152602001600020600701858154811061230b5761230a613ed6565b5b9060005260206000209060030201600201600082825461232b9190613c65565b925050819055506000600167ffffffffffffffff81111561234f5761234e613133565b5b60405190808252806020026020018201604052801561237d5781602001602082028036833780820191505090505b509050848160008151811061239557612394613ed6565b5b6020026020010181815250506000600167ffffffffffffffff8111156123be576123bd613133565b5b6040519080825280602002602001820160405280156123ec5781602001602082028036833780820191505090505b509050848160008151811061240457612403613ed6565b5b602002602001018181525050600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381525090506003600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906124e8929190612e22565b506040820151816002019080519060200190612505929190612e22565b5050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928882600360008c815260200190815260200160002060070160405161255093929190614579565b60405180910390a17f15ee2336b150a2ac9a8dc3209e14074c62564ed20d671cf7463ce9dd78a5e9c588336040516125899291906145be565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266488838533600360008e81526020019081526020016000206007016040516125dd959493929190614321565b60405180910390a150505050506001600081905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826802b5e3af16b18800006040518363ffffffff1660e01b815260040161265d92919061462c565b6020604051808303816000875af115801561267c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a09190613ea9565b5050565b60008060036000858152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b8282101561281557838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156127a557602002820191906000526020600020905b815481526020019060010190808311612791575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156127fd57602002820191906000526020600020905b8154815260200190600101908083116127e9575b505050505081525050815260200190600101906126dd565b50505050905060005b815181101561289c57600082828151811061283c5761283b613ed6565b5b60200260200101516000015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612888578193505050506128c2565b50808061289490613f47565b91505061281e565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b92915050565b60026000540361290d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290490613b84565b60405180910390fd5b6002600081905550674563918244f40000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016129799190613d71565b602060405180830381865afa158015612996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ba9190613da1565b10156129fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129f2906146c7565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330674563918244f400006040518463ffffffff1660e01b8152600401612a6293929190614722565b6020604051808303816000875af1158015612a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa59190613ea9565b506000808603612ab85760009050612ad8565b60018603612ac95760019050612ad7565b60028603612ad657600290505b5b5b6000808603612aea5760009050612b0a565b60018603612afb5760019050612b09565b60028603612b0857600290505b5b5b60026000815480929190612b1d90613f47565b9190505550600060036000600254815260200190815260200160002090506002548160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089816002019081612b9a91906148e6565b5088816003019081612bac91906148e6565b50828160040160006101000a81548160ff02191690836002811115612bd457612bd3612fe3565b5b0217905550818160040160016101000a81548160ff02191690836002811115612c0057612bff612fe3565b5b021790555085816005018190555084816006018190555060005b8451811015612cb0576000858281518110612c3857612c37613ed6565b5b6020026020010151905082600701819080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001019081612c8f91906148e6565b50604082015181600201555050508080612ca890613f47565b915050612c1a565b507fdf54b3b6095f0e4bab834f1d5294b7cbcd9cd963191fb841d618e162d9f56fce600254338c8c87878c8c8c604051612cf2999897969594939291906149b8565b60405180910390a1505050600160008190555050505050505050565b600080600090505b8251811015612d5a57828181518110612d3257612d31613ed6565b5b602002602001015182612d459190613c65565b91508080612d5290613f47565b915050612d16565b50919050565b612df681604051602401612d749190613301565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612df9565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b828054828255906000526020600020908101928215612e5e579160200282015b82811115612e5d578251825591602001919060010190612e42565b5b509050612e6b9190612e6f565b5090565b5b80821115612e88576000816000905550600101612e70565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612eb381612ea0565b8114612ebe57600080fd5b50565b600081359050612ed081612eaa565b92915050565b600060208284031215612eec57612eeb612e96565b5b6000612efa84828501612ec1565b91505092915050565b612f0c81612ea0565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f3d82612f12565b9050919050565b612f4d81612f32565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f8d578082015181840152602081019050612f72565b60008484015250505050565b6000601f19601f8301169050919050565b6000612fb582612f53565b612fbf8185612f5e565b9350612fcf818560208601612f6f565b612fd881612f99565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061302357613022612fe3565b5b50565b600081905061303482613012565b919050565b600061304482613026565b9050919050565b61305481613039565b82525050565b6003811061306b5761306a612fe3565b5b50565b600081905061307c8261305a565b919050565b600061308c8261306e565b9050919050565b61309c81613081565b82525050565b6000610100820190506130b8600083018b612f03565b6130c5602083018a612f44565b81810360408301526130d78189612faa565b905081810360608301526130eb8188612faa565b90506130fa608083018761304b565b61310760a0830186613093565b61311460c0830185612f03565b61312160e0830184612f03565b9998505050505050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61316b82612f99565b810181811067ffffffffffffffff8211171561318a57613189613133565b5b80604052505050565b600061319d612e8c565b90506131a98282613162565b919050565b600067ffffffffffffffff8211156131c9576131c8613133565b5b602082029050602081019050919050565b600080fd5b60006131f26131ed846131ae565b613193565b90508083825260208201905060208402830185811115613215576132146131da565b5b835b8181101561323e578061322a8882612ec1565b845260208401935050602081019050613217565b5050509392505050565b600082601f83011261325d5761325c61312e565b5b813561326d8482602086016131df565b91505092915050565b60008060006060848603121561328f5761328e612e96565b5b600061329d86828701612ec1565b935050602084013567ffffffffffffffff8111156132be576132bd612e9b565b5b6132ca86828701613248565b925050604084013567ffffffffffffffff8111156132eb576132ea612e9b565b5b6132f786828701613248565b9150509250925092565b60006020820190506133166000830184612f03565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61335181612f32565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61338c81612ea0565b82525050565b600061339e8383613383565b60208301905092915050565b6000602082019050919050565b60006133c282613357565b6133cc8185613362565b93506133d783613373565b8060005b838110156134085781516133ef8882613392565b97506133fa836133aa565b9250506001810190506133db565b5085935050505092915050565b600060608301600083015161342d6000860182613348565b506020830151848203602086015261344582826133b7565b9150506040830151848203604086015261345f82826133b7565b9150508091505092915050565b60006134788383613415565b905092915050565b6000602082019050919050565b60006134988261331c565b6134a28185613327565b9350836020820285016134b485613338565b8060005b858110156134f057848403895281516134d1858261346c565b94506134dc83613480565b925060208a019950506001810190506134b8565b50829750879550505050505092915050565b6000602082019050818103600083015261351c818461348d565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061356c82612f53565b6135768185613550565b9350613586818560208601612f6f565b61358f81612f99565b840191505092915050565b60006060830160008301516135b26000860182613383565b50602083015184820360208601526135ca8282613561565b91505060408301516135df6040860182613383565b508091505092915050565b60006135f6838361359a565b905092915050565b6000602082019050919050565b600061361682613524565b613620818561352f565b93508360208202850161363285613540565b8060005b8581101561366e578484038952815161364f85826135ea565b945061365a836135fe565b925060208a01995050600181019050613636565b50829750879550505050505092915050565b6000602082019050818103600083015261369a818461360b565b905092915050565b6000806000606084860312156136bb576136ba612e96565b5b60006136c986828701612ec1565b93505060206136da86828701612ec1565b92505060406136eb86828701612ec1565b9150509250925092565b6136fe81612f32565b811461370957600080fd5b50565b60008135905061371b816136f5565b92915050565b60006020828403121561373757613736612e96565b5b60006137458482850161370c565b91505092915050565b6000806040838503121561376557613764612e96565b5b600061377385828601612ec1565b92505060206137848582860161370c565b9150509250929050565b6000819050919050565b6137a18161378e565b82525050565b60006020820190506137bc6000830184613798565b92915050565b600080fd5b600067ffffffffffffffff8211156137e2576137e1613133565b5b6137eb82612f99565b9050602081019050919050565b82818337600083830152505050565b600061381a613815846137c7565b613193565b905082815260208101848484011115613836576138356137c2565b5b6138418482856137f8565b509392505050565b600082601f83011261385e5761385d61312e565b5b813561386e848260208601613807565b91505092915050565b600067ffffffffffffffff82111561389257613891613133565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000606082840312156138c3576138c26138a3565b5b6138cd6060613193565b905060006138dd84828501612ec1565b600083015250602082013567ffffffffffffffff811115613901576139006138a8565b5b61390d84828501613849565b602083015250604061392184828501612ec1565b60408301525092915050565b600061394061393b84613877565b613193565b90508083825260208201905060208402830185811115613963576139626131da565b5b835b818110156139aa57803567ffffffffffffffff8111156139885761398761312e565b5b80860161399589826138ad565b85526020850194505050602081019050613965565b5050509392505050565b600082601f8301126139c9576139c861312e565b5b81356139d984826020860161392d565b91505092915050565b600080600080600080600060e0888a031215613a0157613a00612e96565b5b600088013567ffffffffffffffff811115613a1f57613a1e612e9b565b5b613a2b8a828b01613849565b975050602088013567ffffffffffffffff811115613a4c57613a4b612e9b565b5b613a588a828b01613849565b9650506040613a698a828b01612ec1565b9550506060613a7a8a828b01612ec1565b9450506080613a8b8a828b01612ec1565b93505060a0613a9c8a828b01612ec1565b92505060c088013567ffffffffffffffff811115613abd57613abc612e9b565b5b613ac98a828b016139b4565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613b1f57607f821691505b602082108103613b3257613b31613ad8565b5b50919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613b6e601f83612f5e565b9150613b7982613b38565b602082019050919050565b60006020820190508181036000830152613b9d81613b61565b9050919050565b7f71756164726174696320766f74696e67206e6f7420616c6c6f77656420666f7260008201527f207468652070726f706f73616c00000000000000000000000000000000000000602082015250565b6000613c00602d83612f5e565b9150613c0b82613ba4565b604082019050919050565b60006020820190508181036000830152613c2f81613bf3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613c7082612ea0565b9150613c7b83612ea0565b9250828201905080821115613c9357613c92613c36565b5b92915050565b7f50726f706f73616c2068617320636c6f73656400000000000000000000000000600082015250565b6000613ccf601383612f5e565b9150613cda82613c99565b602082019050919050565b60006020820190508181036000830152613cfe81613cc2565b9050919050565b7f596f7527766520766f74656420616c7265616479000000000000000000000000600082015250565b6000613d3b601483612f5e565b9150613d4682613d05565b602082019050919050565b60006020820190508181036000830152613d6a81613d2e565b9050919050565b6000602082019050613d866000830184612f44565b92915050565b600081519050613d9b81612eaa565b92915050565b600060208284031215613db757613db6612e96565b5b6000613dc584828501613d8c565b91505092915050565b7f496e73756666696369656e7420566f74696e6720506f77657200000000000000600082015250565b6000613e04601983612f5e565b9150613e0f82613dce565b602082019050919050565b60006020820190508181036000830152613e3381613df7565b9050919050565b6000606082019050613e4f6000830186612f44565b613e5c6020830185612f44565b613e696040830184612f03565b949350505050565b60008115159050919050565b613e8681613e71565b8114613e9157600080fd5b50565b600081519050613ea381613e7d565b92915050565b600060208284031215613ebf57613ebe612e96565b5b6000613ecd84828501613e94565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613f1082612ea0565b9150613f1b83612ea0565b9250828202613f2981612ea0565b91508282048414831517613f4057613f3f613c36565b5b5092915050565b6000613f5282612ea0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613f8457613f83613c36565b5b600182019050919050565b6000606083016000830151613fa76000860182613348565b5060208301518482036020860152613fbf82826133b7565b91505060408301518482036040860152613fd982826133b7565b9150508091505092915050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b600061403061402b83614006565b614013565b9050919050565b60008190508160005260206000209050919050565b6000815461405981613b07565b6140638186613550565b9450600182166000811461407e5760018114614094576140c7565b60ff1983168652811515602002860193506140c7565b61409d85614037565b60005b838110156140bf578154818901526001820191506020810190506140a0565b808801955050505b50505092915050565b60006060830160008084015490506140e78161401d565b6140f46000870182613383565b5060018401858303602087015261410b838261404c565b9250506002840154905061411e8161401d565b61412b6040870182613383565b50819250505092915050565b600061414383836140d0565b905092915050565b6000600382019050919050565b600061416382613fe6565b61416d818561352f565b93508360208202850161417f85613ff1565b8060005b858110156141ba5784840389528161419b8582614137565b94506141a68361414b565b925060208a01995050600181019050614183565b50829750879550505050505092915050565b60006060820190506141e16000830186612f03565b81810360208301526141f38185613f8f565b905081810360408301526142078184614158565b9050949350505050565b600082825260208201905092915050565b600061422d82613357565b6142378185614211565b935061424283613373565b8060005b8381101561427357815161425a8882613392565b9750614265836133aa565b925050600181019050614246565b5085935050505092915050565b600081549050919050565b60008190508160005260206000209050919050565b6000600382019050919050565b60006142b882614280565b6142c2818561352f565b9350836020820285016142d48561428b565b8060005b8581101561430f578484038952816142f08582614137565b94506142fb836142a0565b925060208a019950506001810190506142d8565b50829750879550505050505092915050565b600060a0820190506143366000830188612f03565b81810360208301526143488187614222565b9050818103604083015261435c8186614222565b905061436b6060830185612f44565b818103608083015261437d81846142ad565b90509695505050505050565b7f776569676874656420766f74696e67206e6f7420616c6c6f77656420666f722060008201527f7468652070726f706f73616c0000000000000000000000000000000000000000602082015250565b60006143e5602c83612f5e565b91506143f082614389565b604082019050919050565b60006020820190508181036000830152614414816143d8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061445582612ea0565b915061446083612ea0565b9250826144705761446f61441b565b5b828204905092915050565b7f73696e676c652063686f69636520766f74696e67206e6f7420616c6c6f77656460008201527f20666f72207468652070726f706f73616c000000000000000000000000000000602082015250565b60006144d7603183612f5e565b91506144e28261447b565b604082019050919050565b60006020820190508181036000830152614506816144ca565b9050919050565b7f496e73756666696369656e7420766f74696e6720506f77657200000000000000600082015250565b6000614543601983612f5e565b915061454e8261450d565b602082019050919050565b6000602082019050818103600083015261457281614536565b9050919050565b600060608201905061458e6000830186612f03565b81810360208301526145a08185613f8f565b905081810360408301526145b481846142ad565b9050949350505050565b60006040820190506145d36000830185612f03565b6145e06020830184612f44565b9392505050565b6000819050919050565b6000819050919050565b600061461661461161460c846145e7565b6145f1565b612ea0565b9050919050565b614626816145fb565b82525050565b60006040820190506146416000830185612f44565b61464e602083018461461d565b9392505050565b7f4d696e696d756d206f662035204c4152206973206e656564656420746f20637260008201527f6561746520612070726f706f73616c0000000000000000000000000000000000602082015250565b60006146b1602f83612f5e565b91506146bc82614655565b604082019050919050565b600060208201905081810360008301526146e0816146a4565b9050919050565b6000819050919050565b600061470c614707614702846146e7565b6145f1565b612ea0565b9050919050565b61471c816146f1565b82525050565b60006060820190506147376000830186612f44565b6147446020830185612f44565b6147516040830184614713565b949350505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026147a67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614769565b6147b08683614769565b95508019841693508086168417925050509392505050565b60006147e36147de6147d984612ea0565b6145f1565b612ea0565b9050919050565b6000819050919050565b6147fd836147c8565b614811614809826147ea565b848454614776565b825550505050565b600090565b614826614819565b6148318184846147f4565b505050565b5b818110156148555761484a60008261481e565b600181019050614837565b5050565b601f82111561489a5761486b81614037565b61487484614759565b81016020851015614883578190505b61489761488f85614759565b830182614836565b50505b505050565b600082821c905092915050565b60006148bd6000198460080261489f565b1980831691505092915050565b60006148d683836148ac565b9150826002028217905092915050565b6148ef82612f53565b67ffffffffffffffff81111561490857614907613133565b5b6149128254613b07565b61491d828285614859565b600060209050601f831160018114614950576000841561493e578287015190505b61494885826148ca565b8655506149b0565b601f19841661495e86614037565b60005b8281101561498657848901518255600182019150602085019450602081019050614961565b868310156149a3578489015161499f601f8916826148ac565b8355505b6001600288020188555050505b505050505050565b6000610120820190506149ce600083018c612f03565b6149db602083018b612f44565b81810360408301526149ed818a612faa565b90508181036060830152614a018189612faa565b9050614a10608083018861304b565b614a1d60a0830187613093565b614a2a60c0830186612f03565b614a3760e0830185612f03565b818103610100830152614a4a818461360b565b90509a995050505050505050505056fea2646970667358221220d63889b41022239fbdf9fa2cac92f5914ac4bc67d5549af3d4b9688e78ebaffb64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638915b3fb116100665780638915b3fb146101725780639a234175146101a2578063c36954ba146101be578063da12935c146101da578063e16659941461020a5761009e565b8063013cf08b146100a35780632d2a1544146100da57806350d2d30a146100f6578063677342ce1461011257806386b646f214610142575b600080fd5b6100bd60048036038101906100b89190612ed6565b610226565b6040516100d19897969594939291906130a2565b60405180910390f35b6100f460048036038101906100ef9190613276565b6103b8565b005b610110600480360381019061010b9190613276565b610e83565b005b61012c60048036038101906101279190612ed6565b611858565b6040516101399190613301565b60405180910390f35b61015c60048036038101906101579190612ed6565b6118d2565b6040516101699190613502565b60405180910390f35b61018c60048036038101906101879190612ed6565b611a4d565b6040516101999190613680565b60405180910390f35b6101bc60048036038101906101b791906136a2565b611b68565b005b6101d860048036038101906101d39190613721565b6125f7565b005b6101f460048036038101906101ef919061374e565b6126a4565b60405161020191906137a7565b60405180910390f35b610224600480360381019061021f91906139e2565b6128c8565b005b60036020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201805461027590613b07565b80601f01602080910402602001604051908101604052809291908181526020018280546102a190613b07565b80156102ee5780601f106102c3576101008083540402835291602001916102ee565b820191906000526020600020905b8154815290600101906020018083116102d157829003601f168201915b50505050509080600301805461030390613b07565b80601f016020809104026020016040519081016040528092919081815260200182805461032f90613b07565b801561037c5780601f106103515761010080835404028352916020019161037c565b820191906000526020600020905b81548152906001019060200180831161035f57829003601f168201915b5050505050908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16908060050154908060060154905088565b6002600054036103fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f490613b84565b60405180910390fd5b6002600081905550600061041082612d0e565b9050600061041e85336126a4565b905060006003600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546104b190613b07565b80601f01602080910402602001604051908101604052809291908181526020018280546104dd90613b07565b801561052a5780601f106104ff5761010080835404028352916020019161052a565b820191906000526020600020905b81548152906001019060200180831161050d57829003601f168201915b5050505050815260200160038201805461054390613b07565b80601f016020809104026020016040519081016040528092919081815260200182805461056f90613b07565b80156105bc5780601f10610591576101008083540402835291602001916105bc565b820191906000526020600020905b81548152906001019060200180831161059f57829003601f168201915b505050505081526020016004820160009054906101000a900460ff1660028111156105ea576105e9612fe3565b5b60028111156105fc576105fb612fe3565b5b81526020016004820160019054906101000a900460ff16600281111561062557610624612fe3565b5b600281111561063757610636612fe3565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561074c5783829060005260206000209060030201604051806060016040529081600082015481526020016001820180546106b190613b07565b80601f01602080910402602001604051908101604052809291908181526020018280546106dd90613b07565b801561072a5780601f106106ff5761010080835404028352916020019161072a565b820191906000526020600020905b81548152906001019060200180831161070d57829003601f168201915b5050505050815260200160028201548152505081526020019060010190610674565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156108b157838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561084157602002820191906000526020600020905b81548152602001906001019080831161082d575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561089957602002820191906000526020600020905b815481526020019060010190808311610885575b50505050508152505081526020019060010190610779565b505050508152505090506002808111156108ce576108cd612fe3565b5b816080015160028111156108e5576108e4612fe3565b5b14610925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091c90613c16565b60405180910390fd5b8060e001518160c001516109399190613c65565b421061097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190613ce5565b60405180910390fd5b600082126109bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b490613d51565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610a199190613d71565b602060405180830381865afa158015610a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5a9190613da1565b1015610a9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9290613e1a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610afa93929190613e3a565b6020604051808303816000875af1158015610b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3d9190613ea9565b50600060036000888152602001908152602001600020600701905060005b8651811015610c29576000878281518110610b7957610b78613ed6565b5b602002602001015190506000878381518110610b9857610b97613ed6565b5b60200260200101519050610bc2633b9aca00610bb383611858565b610bbd9190613f05565b612d60565b633b9aca00610bd082611858565b610bda9190613f05565b848381548110610bed57610bec613ed6565b5b90600052602060002090600302016002016000828254610c0d9190613c65565b9250508190555050508080610c2190613f47565b915050610b5b565b506000855167ffffffffffffffff811115610c4757610c46613133565b5b604051908082528060200260200182016040528015610c755781602001602082028036833780820191505090505b50905060005b8651811015610ce857633b9aca00610cac888381518110610c9f57610c9e613ed6565b5b6020026020010151611858565b610cb69190613f05565b828281518110610cc957610cc8613ed6565b5b6020026020010181815250508080610ce090613f47565b915050610c7b565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001898152602001838152509050600360008a815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610dc1929190612e22565b506040820151816002019080519060200190610dde929190612e22565b5050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e92898285604051610e14939291906141cc565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266489838a33600360008f8152602001908152602001600020600701604051610e68959493929190614321565b60405180910390a15050505050506001600081905550505050565b600260005403610ec8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebf90613b84565b60405180910390fd5b60026000819055506000610edb82612d0e565b90506000610ee985336126a4565b905060006003600087815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610f7c90613b07565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa890613b07565b8015610ff55780601f10610fca57610100808354040283529160200191610ff5565b820191906000526020600020905b815481529060010190602001808311610fd857829003601f168201915b5050505050815260200160038201805461100e90613b07565b80601f016020809104026020016040519081016040528092919081815260200182805461103a90613b07565b80156110875780601f1061105c57610100808354040283529160200191611087565b820191906000526020600020905b81548152906001019060200180831161106a57829003601f168201915b505050505081526020016004820160009054906101000a900460ff1660028111156110b5576110b4612fe3565b5b60028111156110c7576110c6612fe3565b5b81526020016004820160019054906101000a900460ff1660028111156110f0576110ef612fe3565b5b600281111561110257611101612fe3565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561121757838290600052602060002090600302016040518060600160405290816000820154815260200160018201805461117c90613b07565b80601f01602080910402602001604051908101604052809291908181526020018280546111a890613b07565b80156111f55780601f106111ca576101008083540402835291602001916111f5565b820191906000526020600020905b8154815290600101906020018083116111d857829003601f168201915b505050505081526020016002820154815250508152602001906001019061113f565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561137c57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561130c57602002820191906000526020600020905b8154815260200190600101908083116112f8575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561136457602002820191906000526020600020905b815481526020019060010190808311611350575b50505050508152505081526020019060010190611244565b505050508152505090506001600281111561139a57611399612fe3565b5b816080015160028111156113b1576113b0612fe3565b5b146113f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e8906143fb565b60405180910390fd5b8060e001518160c001516114059190613c65565b4210611446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143d90613ce5565b60405180910390fd5b60008212611489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148090613d51565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016114e59190613d71565b602060405180830381865afa158015611502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115269190613da1565b1015611567576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155e90613e1a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016115c693929190613e3a565b6020604051808303816000875af11580156115e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116099190613ea9565b50600060036000888152602001908152602001600020600701905060005b86518110156116be57600087828151811061164557611644613ed6565b5b60200260200101519050600087838151811061166457611663613ed6565b5b602002602001015190508084838154811061168257611681613ed6565b5b906000526020600020906003020160020160008282546116a29190613c65565b92505081905550505080806116b690613f47565b915050611627565b50600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781525090506003600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190611797929190612e22565b5060408201518160020190805190602001906117b4929190612e22565b5050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928882846040516117ea939291906141cc565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266488878933600360008e815260200190815260200160002060070160405161183e959493929190614321565b60405180910390a150505050506001600081905550505050565b600060038211156118bf5781905060006001600284611877919061444a565b6118819190613c65565b90505b818110156118b957809150600281828561189e919061444a565b6118a89190613c65565b6118b2919061444a565b9050611884565b506118cd565b600082146118cc57600190505b5b919050565b606060036000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b82821015611a4257838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156119d257602002820191906000526020600020905b8154815260200190600101908083116119be575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611a2a57602002820191906000526020600020905b815481526020019060010190808311611a16575b5050505050815250508152602001906001019061190a565b505050509050919050565b606060036000838152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b82821015611b5d578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054611ac290613b07565b80601f0160208091040260200160405190810160405280929190818152602001828054611aee90613b07565b8015611b3b5780601f10611b1057610100808354040283529160200191611b3b565b820191906000526020600020905b815481529060010190602001808311611b1e57829003601f168201915b5050505050815260200160028201548152505081526020019060010190611a85565b505050509050919050565b600260005403611bad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba490613b84565b60405180910390fd5b60026000819055506000611bc184336126a4565b905060006003600086815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054611c5490613b07565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8090613b07565b8015611ccd5780601f10611ca257610100808354040283529160200191611ccd565b820191906000526020600020905b815481529060010190602001808311611cb057829003601f168201915b50505050508152602001600382018054611ce690613b07565b80601f0160208091040260200160405190810160405280929190818152602001828054611d1290613b07565b8015611d5f5780601f10611d3457610100808354040283529160200191611d5f565b820191906000526020600020905b815481529060010190602001808311611d4257829003601f168201915b505050505081526020016004820160009054906101000a900460ff166002811115611d8d57611d8c612fe3565b5b6002811115611d9f57611d9e612fe3565b5b81526020016004820160019054906101000a900460ff166002811115611dc857611dc7612fe3565b5b6002811115611dda57611dd9612fe3565b5b8152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015611eef578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054611e5490613b07565b80601f0160208091040260200160405190810160405280929190818152602001828054611e8090613b07565b8015611ecd5780601f10611ea257610100808354040283529160200191611ecd565b820191906000526020600020905b815481529060010190602001808311611eb057829003601f168201915b5050505050815260200160028201548152505081526020019060010190611e17565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561205457838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015611fe457602002820191906000526020600020905b815481526020019060010190808311611fd0575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561203c57602002820191906000526020600020905b815481526020019060010190808311612028575b50505050508152505081526020019060010190611f1c565b505050508152505090506000600281111561207257612071612fe3565b5b8160800151600281111561208957612088612fe3565b5b146120c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c0906144ed565b60405180910390fd5b8060e001518160c001516120dd9190613c65565b421061211e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211590613ce5565b60405180910390fd5b60008212612161576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215890613d51565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016121bd9190613d71565b602060405180830381865afa1580156121da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fe9190613da1565b101561223f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223690614559565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161229e93929190613e3a565b6020604051808303816000875af11580156122bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e19190613ea9565b508260036000878152602001908152602001600020600701858154811061230b5761230a613ed6565b5b9060005260206000209060030201600201600082825461232b9190613c65565b925050819055506000600167ffffffffffffffff81111561234f5761234e613133565b5b60405190808252806020026020018201604052801561237d5781602001602082028036833780820191505090505b509050848160008151811061239557612394613ed6565b5b6020026020010181815250506000600167ffffffffffffffff8111156123be576123bd613133565b5b6040519080825280602002602001820160405280156123ec5781602001602082028036833780820191505090505b509050848160008151811061240457612403613ed6565b5b602002602001018181525050600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381525090506003600089815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906124e8929190612e22565b506040820151816002019080519060200190612505929190612e22565b5050507fedd89be9eb4a922724633e7ddfae54c27ffbc845b984f49e743abe01853c9e928882600360008c815260200190815260200160002060070160405161255093929190614579565b60405180910390a17f15ee2336b150a2ac9a8dc3209e14074c62564ed20d671cf7463ce9dd78a5e9c588336040516125899291906145be565b60405180910390a17f5c7909d066a31583e19be67075f97226281463a14932070aee91b36738f5266488838533600360008e81526020019081526020016000206007016040516125dd959493929190614321565b60405180910390a150505050506001600081905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826802b5e3af16b18800006040518363ffffffff1660e01b815260040161265d92919061462c565b6020604051808303816000875af115801561267c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a09190613ea9565b5050565b60008060036000858152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b8282101561281557838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156127a557602002820191906000526020600020905b815481526020019060010190808311612791575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156127fd57602002820191906000526020600020905b8154815260200190600101908083116127e9575b505050505081525050815260200190600101906126dd565b50505050905060005b815181101561289c57600082828151811061283c5761283b613ed6565b5b60200260200101516000015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612888578193505050506128c2565b50808061289490613f47565b91505061281e565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150505b92915050565b60026000540361290d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290490613b84565b60405180910390fd5b6002600081905550674563918244f40000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016129799190613d71565b602060405180830381865afa158015612996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ba9190613da1565b10156129fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129f2906146c7565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330674563918244f400006040518463ffffffff1660e01b8152600401612a6293929190614722565b6020604051808303816000875af1158015612a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa59190613ea9565b506000808603612ab85760009050612ad8565b60018603612ac95760019050612ad7565b60028603612ad657600290505b5b5b6000808603612aea5760009050612b0a565b60018603612afb5760019050612b09565b60028603612b0857600290505b5b5b60026000815480929190612b1d90613f47565b9190505550600060036000600254815260200190815260200160002090506002548160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089816002019081612b9a91906148e6565b5088816003019081612bac91906148e6565b50828160040160006101000a81548160ff02191690836002811115612bd457612bd3612fe3565b5b0217905550818160040160016101000a81548160ff02191690836002811115612c0057612bff612fe3565b5b021790555085816005018190555084816006018190555060005b8451811015612cb0576000858281518110612c3857612c37613ed6565b5b6020026020010151905082600701819080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001019081612c8f91906148e6565b50604082015181600201555050508080612ca890613f47565b915050612c1a565b507fdf54b3b6095f0e4bab834f1d5294b7cbcd9cd963191fb841d618e162d9f56fce600254338c8c87878c8c8c604051612cf2999897969594939291906149b8565b60405180910390a1505050600160008190555050505050505050565b600080600090505b8251811015612d5a57828181518110612d3257612d31613ed6565b5b602002602001015182612d459190613c65565b91508080612d5290613f47565b915050612d16565b50919050565b612df681604051602401612d749190613301565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612df9565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b828054828255906000526020600020908101928215612e5e579160200282015b82811115612e5d578251825591602001919060010190612e42565b5b509050612e6b9190612e6f565b5090565b5b80821115612e88576000816000905550600101612e70565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612eb381612ea0565b8114612ebe57600080fd5b50565b600081359050612ed081612eaa565b92915050565b600060208284031215612eec57612eeb612e96565b5b6000612efa84828501612ec1565b91505092915050565b612f0c81612ea0565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f3d82612f12565b9050919050565b612f4d81612f32565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f8d578082015181840152602081019050612f72565b60008484015250505050565b6000601f19601f8301169050919050565b6000612fb582612f53565b612fbf8185612f5e565b9350612fcf818560208601612f6f565b612fd881612f99565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061302357613022612fe3565b5b50565b600081905061303482613012565b919050565b600061304482613026565b9050919050565b61305481613039565b82525050565b6003811061306b5761306a612fe3565b5b50565b600081905061307c8261305a565b919050565b600061308c8261306e565b9050919050565b61309c81613081565b82525050565b6000610100820190506130b8600083018b612f03565b6130c5602083018a612f44565b81810360408301526130d78189612faa565b905081810360608301526130eb8188612faa565b90506130fa608083018761304b565b61310760a0830186613093565b61311460c0830185612f03565b61312160e0830184612f03565b9998505050505050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61316b82612f99565b810181811067ffffffffffffffff8211171561318a57613189613133565b5b80604052505050565b600061319d612e8c565b90506131a98282613162565b919050565b600067ffffffffffffffff8211156131c9576131c8613133565b5b602082029050602081019050919050565b600080fd5b60006131f26131ed846131ae565b613193565b90508083825260208201905060208402830185811115613215576132146131da565b5b835b8181101561323e578061322a8882612ec1565b845260208401935050602081019050613217565b5050509392505050565b600082601f83011261325d5761325c61312e565b5b813561326d8482602086016131df565b91505092915050565b60008060006060848603121561328f5761328e612e96565b5b600061329d86828701612ec1565b935050602084013567ffffffffffffffff8111156132be576132bd612e9b565b5b6132ca86828701613248565b925050604084013567ffffffffffffffff8111156132eb576132ea612e9b565b5b6132f786828701613248565b9150509250925092565b60006020820190506133166000830184612f03565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61335181612f32565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61338c81612ea0565b82525050565b600061339e8383613383565b60208301905092915050565b6000602082019050919050565b60006133c282613357565b6133cc8185613362565b93506133d783613373565b8060005b838110156134085781516133ef8882613392565b97506133fa836133aa565b9250506001810190506133db565b5085935050505092915050565b600060608301600083015161342d6000860182613348565b506020830151848203602086015261344582826133b7565b9150506040830151848203604086015261345f82826133b7565b9150508091505092915050565b60006134788383613415565b905092915050565b6000602082019050919050565b60006134988261331c565b6134a28185613327565b9350836020820285016134b485613338565b8060005b858110156134f057848403895281516134d1858261346c565b94506134dc83613480565b925060208a019950506001810190506134b8565b50829750879550505050505092915050565b6000602082019050818103600083015261351c818461348d565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061356c82612f53565b6135768185613550565b9350613586818560208601612f6f565b61358f81612f99565b840191505092915050565b60006060830160008301516135b26000860182613383565b50602083015184820360208601526135ca8282613561565b91505060408301516135df6040860182613383565b508091505092915050565b60006135f6838361359a565b905092915050565b6000602082019050919050565b600061361682613524565b613620818561352f565b93508360208202850161363285613540565b8060005b8581101561366e578484038952815161364f85826135ea565b945061365a836135fe565b925060208a01995050600181019050613636565b50829750879550505050505092915050565b6000602082019050818103600083015261369a818461360b565b905092915050565b6000806000606084860312156136bb576136ba612e96565b5b60006136c986828701612ec1565b93505060206136da86828701612ec1565b92505060406136eb86828701612ec1565b9150509250925092565b6136fe81612f32565b811461370957600080fd5b50565b60008135905061371b816136f5565b92915050565b60006020828403121561373757613736612e96565b5b60006137458482850161370c565b91505092915050565b6000806040838503121561376557613764612e96565b5b600061377385828601612ec1565b92505060206137848582860161370c565b9150509250929050565b6000819050919050565b6137a18161378e565b82525050565b60006020820190506137bc6000830184613798565b92915050565b600080fd5b600067ffffffffffffffff8211156137e2576137e1613133565b5b6137eb82612f99565b9050602081019050919050565b82818337600083830152505050565b600061381a613815846137c7565b613193565b905082815260208101848484011115613836576138356137c2565b5b6138418482856137f8565b509392505050565b600082601f83011261385e5761385d61312e565b5b813561386e848260208601613807565b91505092915050565b600067ffffffffffffffff82111561389257613891613133565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000606082840312156138c3576138c26138a3565b5b6138cd6060613193565b905060006138dd84828501612ec1565b600083015250602082013567ffffffffffffffff811115613901576139006138a8565b5b61390d84828501613849565b602083015250604061392184828501612ec1565b60408301525092915050565b600061394061393b84613877565b613193565b90508083825260208201905060208402830185811115613963576139626131da565b5b835b818110156139aa57803567ffffffffffffffff8111156139885761398761312e565b5b80860161399589826138ad565b85526020850194505050602081019050613965565b5050509392505050565b600082601f8301126139c9576139c861312e565b5b81356139d984826020860161392d565b91505092915050565b600080600080600080600060e0888a031215613a0157613a00612e96565b5b600088013567ffffffffffffffff811115613a1f57613a1e612e9b565b5b613a2b8a828b01613849565b975050602088013567ffffffffffffffff811115613a4c57613a4b612e9b565b5b613a588a828b01613849565b9650506040613a698a828b01612ec1565b9550506060613a7a8a828b01612ec1565b9450506080613a8b8a828b01612ec1565b93505060a0613a9c8a828b01612ec1565b92505060c088013567ffffffffffffffff811115613abd57613abc612e9b565b5b613ac98a828b016139b4565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613b1f57607f821691505b602082108103613b3257613b31613ad8565b5b50919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613b6e601f83612f5e565b9150613b7982613b38565b602082019050919050565b60006020820190508181036000830152613b9d81613b61565b9050919050565b7f71756164726174696320766f74696e67206e6f7420616c6c6f77656420666f7260008201527f207468652070726f706f73616c00000000000000000000000000000000000000602082015250565b6000613c00602d83612f5e565b9150613c0b82613ba4565b604082019050919050565b60006020820190508181036000830152613c2f81613bf3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613c7082612ea0565b9150613c7b83612ea0565b9250828201905080821115613c9357613c92613c36565b5b92915050565b7f50726f706f73616c2068617320636c6f73656400000000000000000000000000600082015250565b6000613ccf601383612f5e565b9150613cda82613c99565b602082019050919050565b60006020820190508181036000830152613cfe81613cc2565b9050919050565b7f596f7527766520766f74656420616c7265616479000000000000000000000000600082015250565b6000613d3b601483612f5e565b9150613d4682613d05565b602082019050919050565b60006020820190508181036000830152613d6a81613d2e565b9050919050565b6000602082019050613d866000830184612f44565b92915050565b600081519050613d9b81612eaa565b92915050565b600060208284031215613db757613db6612e96565b5b6000613dc584828501613d8c565b91505092915050565b7f496e73756666696369656e7420566f74696e6720506f77657200000000000000600082015250565b6000613e04601983612f5e565b9150613e0f82613dce565b602082019050919050565b60006020820190508181036000830152613e3381613df7565b9050919050565b6000606082019050613e4f6000830186612f44565b613e5c6020830185612f44565b613e696040830184612f03565b949350505050565b60008115159050919050565b613e8681613e71565b8114613e9157600080fd5b50565b600081519050613ea381613e7d565b92915050565b600060208284031215613ebf57613ebe612e96565b5b6000613ecd84828501613e94565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613f1082612ea0565b9150613f1b83612ea0565b9250828202613f2981612ea0565b91508282048414831517613f4057613f3f613c36565b5b5092915050565b6000613f5282612ea0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613f8457613f83613c36565b5b600182019050919050565b6000606083016000830151613fa76000860182613348565b5060208301518482036020860152613fbf82826133b7565b91505060408301518482036040860152613fd982826133b7565b9150508091505092915050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b600061403061402b83614006565b614013565b9050919050565b60008190508160005260206000209050919050565b6000815461405981613b07565b6140638186613550565b9450600182166000811461407e5760018114614094576140c7565b60ff1983168652811515602002860193506140c7565b61409d85614037565b60005b838110156140bf578154818901526001820191506020810190506140a0565b808801955050505b50505092915050565b60006060830160008084015490506140e78161401d565b6140f46000870182613383565b5060018401858303602087015261410b838261404c565b9250506002840154905061411e8161401d565b61412b6040870182613383565b50819250505092915050565b600061414383836140d0565b905092915050565b6000600382019050919050565b600061416382613fe6565b61416d818561352f565b93508360208202850161417f85613ff1565b8060005b858110156141ba5784840389528161419b8582614137565b94506141a68361414b565b925060208a01995050600181019050614183565b50829750879550505050505092915050565b60006060820190506141e16000830186612f03565b81810360208301526141f38185613f8f565b905081810360408301526142078184614158565b9050949350505050565b600082825260208201905092915050565b600061422d82613357565b6142378185614211565b935061424283613373565b8060005b8381101561427357815161425a8882613392565b9750614265836133aa565b925050600181019050614246565b5085935050505092915050565b600081549050919050565b60008190508160005260206000209050919050565b6000600382019050919050565b60006142b882614280565b6142c2818561352f565b9350836020820285016142d48561428b565b8060005b8581101561430f578484038952816142f08582614137565b94506142fb836142a0565b925060208a019950506001810190506142d8565b50829750879550505050505092915050565b600060a0820190506143366000830188612f03565b81810360208301526143488187614222565b9050818103604083015261435c8186614222565b905061436b6060830185612f44565b818103608083015261437d81846142ad565b90509695505050505050565b7f776569676874656420766f74696e67206e6f7420616c6c6f77656420666f722060008201527f7468652070726f706f73616c0000000000000000000000000000000000000000602082015250565b60006143e5602c83612f5e565b91506143f082614389565b604082019050919050565b60006020820190508181036000830152614414816143d8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061445582612ea0565b915061446083612ea0565b9250826144705761446f61441b565b5b828204905092915050565b7f73696e676c652063686f69636520766f74696e67206e6f7420616c6c6f77656460008201527f20666f72207468652070726f706f73616c000000000000000000000000000000602082015250565b60006144d7603183612f5e565b91506144e28261447b565b604082019050919050565b60006020820190508181036000830152614506816144ca565b9050919050565b7f496e73756666696369656e7420766f74696e6720506f77657200000000000000600082015250565b6000614543601983612f5e565b915061454e8261450d565b602082019050919050565b6000602082019050818103600083015261457281614536565b9050919050565b600060608201905061458e6000830186612f03565b81810360208301526145a08185613f8f565b905081810360408301526145b481846142ad565b9050949350505050565b60006040820190506145d36000830185612f03565b6145e06020830184612f44565b9392505050565b6000819050919050565b6000819050919050565b600061461661461161460c846145e7565b6145f1565b612ea0565b9050919050565b614626816145fb565b82525050565b60006040820190506146416000830185612f44565b61464e602083018461461d565b9392505050565b7f4d696e696d756d206f662035204c4152206973206e656564656420746f20637260008201527f6561746520612070726f706f73616c0000000000000000000000000000000000602082015250565b60006146b1602f83612f5e565b91506146bc82614655565b604082019050919050565b600060208201905081810360008301526146e0816146a4565b9050919050565b6000819050919050565b600061470c614707614702846146e7565b6145f1565b612ea0565b9050919050565b61471c816146f1565b82525050565b60006060820190506147376000830186612f44565b6147446020830185612f44565b6147516040830184614713565b949350505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026147a67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614769565b6147b08683614769565b95508019841693508086168417925050509392505050565b60006147e36147de6147d984612ea0565b6145f1565b612ea0565b9050919050565b6000819050919050565b6147fd836147c8565b614811614809826147ea565b848454614776565b825550505050565b600090565b614826614819565b6148318184846147f4565b505050565b5b818110156148555761484a60008261481e565b600181019050614837565b5050565b601f82111561489a5761486b81614037565b61487484614759565b81016020851015614883578190505b61489761488f85614759565b830182614836565b50505b505050565b600082821c905092915050565b60006148bd6000198460080261489f565b1980831691505092915050565b60006148d683836148ac565b9150826002028217905092915050565b6148ef82612f53565b67ffffffffffffffff81111561490857614907613133565b5b6149128254613b07565b61491d828285614859565b600060209050601f831160018114614950576000841561493e578287015190505b61494885826148ca565b8655506149b0565b601f19841661495e86614037565b60005b8281101561498657848901518255600182019150602085019450602081019050614961565b868310156149a3578489015161499f601f8916826148ac565b8355505b6001600288020188555050505b505050505050565b6000610120820190506149ce600083018c612f03565b6149db602083018b612f44565b81810360408301526149ed818a612faa565b90508181036060830152614a018189612faa565b9050614a10608083018861304b565b614a1d60a0830187613093565b614a2a60c0830186612f03565b614a3760e0830185612f03565b818103610100830152614a4a818461360b565b90509a995050505050505050505056fea2646970667358221220d63889b41022239fbdf9fa2cac92f5914ac4bc67d5549af3d4b9688e78ebaffb64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Dao.sol:Dao",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 127,
        "contract": "contracts/Dao.sol:Dao",
        "label": "larToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)117"
      },
      {
        "astId": 129,
        "contract": "contracts/Dao.sol:Dao",
        "label": "proposalId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 242,
        "contract": "contracts/Dao.sol:Dao",
        "label": "proposals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Proposal)180_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Option)144_storage)dyn_storage": {
        "base": "t_struct(Option)144_storage",
        "encoding": "dynamic_array",
        "label": "struct Dao.Option[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Voter)153_storage)dyn_storage": {
        "base": "t_struct(Voter)153_storage",
        "encoding": "dynamic_array",
        "label": "struct Dao.Voter[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)117": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ProposalStatus)137": {
        "encoding": "inplace",
        "label": "enum Dao.ProposalStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ProposalType)133": {
        "encoding": "inplace",
        "label": "enum Dao.ProposalType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Proposal)180_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Dao.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)180_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Option)144_storage": {
        "encoding": "inplace",
        "label": "struct Dao.Option",
        "members": [
          {
            "astId": 139,
            "contract": "contracts/Dao.sol:Dao",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 141,
            "contract": "contracts/Dao.sol:Dao",
            "label": "optionText",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 143,
            "contract": "contracts/Dao.sol:Dao",
            "label": "vote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Proposal)180_storage": {
        "encoding": "inplace",
        "label": "struct Dao.Proposal",
        "members": [
          {
            "astId": 155,
            "contract": "contracts/Dao.sol:Dao",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 157,
            "contract": "contracts/Dao.sol:Dao",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 159,
            "contract": "contracts/Dao.sol:Dao",
            "label": "title",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 161,
            "contract": "contracts/Dao.sol:Dao",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 164,
            "contract": "contracts/Dao.sol:Dao",
            "label": "proposalType",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(ProposalType)133"
          },
          {
            "astId": 167,
            "contract": "contracts/Dao.sol:Dao",
            "label": "proposalStatus",
            "offset": 1,
            "slot": "4",
            "type": "t_enum(ProposalStatus)137"
          },
          {
            "astId": 169,
            "contract": "contracts/Dao.sol:Dao",
            "label": "startDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 171,
            "contract": "contracts/Dao.sol:Dao",
            "label": "duration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 175,
            "contract": "contracts/Dao.sol:Dao",
            "label": "options",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Option)144_storage)dyn_storage"
          },
          {
            "astId": 179,
            "contract": "contracts/Dao.sol:Dao",
            "label": "voters",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Voter)153_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Voter)153_storage": {
        "encoding": "inplace",
        "label": "struct Dao.Voter",
        "members": [
          {
            "astId": 146,
            "contract": "contracts/Dao.sol:Dao",
            "label": "voterAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 149,
            "contract": "contracts/Dao.sol:Dao",
            "label": "optionIndexes",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 152,
            "contract": "contracts/Dao.sol:Dao",
            "label": "optionVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}